setwd("~/R/StdIndices/SEI")
devtools::load_all()
devtools::load_all()
install.packages(devtools)
install.packages("devtools")
devtools::load_all()
data("data_ic2017")
install.packages("here")
#library(SEI)
devtools::load_all()
library(dplyr)
input_data <- data.frame(num_ev, area=s_names)
knitr::opts_chunk$set(collapse = TRUE,comment = "#>", fig.width = 8, fig.height = 6)
#library(SEI)
devtools::load_all()
library(dplyr)
data("data_ic2017")
head(data_ic2017)
abbrevs <- get_abbrevs(unique(data_ic2017$country))
s_names <- unlist(lapply(unique(data_ic2017$country), get_shortcountry_names))
plot_ics(data_ic2017, s_names)
data("data_supply")
head(data_supply)
nvars <- c("PWS")
raw_1h <- calculate_energyindex_country(data_supply, method = "none", scale = NULL, nvars)
raw_1d <- calculate_energyindex_country(data_supply, method = "none", scale = 24, nvars)
head(raw_1h$SDEI$Portugal)
country_str <- "Portugal"
variable_str <- "PWS"
year_vec <- 2019
library(ggplot2)
sdei_raw_reduced <- raw_1h$SDEI[[country_str]] %>% dplyr::filter(type == variable_str)
plot_sdei(sdei_raw_reduced, year_vec,ivar = "SDEI")
sdei_rawD_reduced <- raw_1d$SDEI[[country_str]] %>% dplyr::filter(type == variable_str)
plot_sdei(sdei_rawD_reduced, year_vec,ivar = "SDEI")
sdei_1h <- calculate_energyindex_country(data_supply, method = "empirical", scale = NULL, nvars)
sdei_1d <- calculate_energyindex_country(data_supply, method = "empirical", scale = 24, nvars)
sdei_reduced <- sdei_1h$SDEI[[country_str]] %>% dplyr::filter(type == variable_str)
sdeiD_reduced <- sdei_1d$SDEI[[country_str]] %>% dplyr::filter(type == variable_str)
plot_sdei(sdei_reduced, year_vec, ivar = "SDEI")
plot_sdei(sdei_reduced, year_vec, ivar = "SDEI")
ylabb <- if(variable_str == "res_load_WS"){"RL (GW)"}else if(variable_str == "PWS"){"REP (GW)"}else{""}
plot_sdei_dist(sdei_raw_reduced, n_bins = 50, title = ylabb)
ylabb <- if(variable_str == "res_load_WS"){"SRLI"}else if(variable_str == "PWS"){"SREPI"}else{""}
plot_sdei_dist(sdei_reduced, n_bins = 50, title = ylabb)
variable_str <- "PWS"
# Define threshold values to use when defining droughts
threshvals <- c(1, 1.5, 2)*(2*sign(variable_str!="PWS") - 1)
sdei_1d_pivot <- lapply(sdei_1d$SDEI, function(x) {x%>%dplyr::rename(!!variable_str:=SDEI)})
sdei_1d_ev    <- lapply(sdei_1d_pivot, def_energy_drought, variable_str, threshvals, higher = variable_str!="PWS")
n_year <- 1
num_ev <- sapply(sdei_1d_ev, function(x) sum(x$dur != 0)/n_year)
input_data <- data.frame(num_ev, area=s_names)
debugonce(plot_index_UEmap)
plot_index_UEmap(input_data, "num_ev", NULL)
debugonce(plot_index_UEmap)
plot_index_UEmap(input_data, "num_ev", NULL)
debugonce(readr::read_rds)
file
refhook
debugonce(readRDS)
refhook
set.seed(101)
n.years <- 60
date <- rep(1:n.years,each=12) + 1950 + rep((0:11)/12,times=n.years)
## Precipitation
PRECIP <- (0.25*sin( 2 * pi * date) + 0.3)*rgamma(n.years*12, shape = 3, scale = 1)
PRECIP[PRECIP<0.1] <- 0
## Potential Evapotranspiration
PET <- 0.5*sin( 2 * pi * date)+1.2+rnorm(n.years*12,0,0.2)
## display test data
matplot(date,cbind(PRECIP,PET),t=c("h","l"),col=c("blue","red"),lty=1)
legend("topright",legend=c("PRECIPitation","temperature"),fill=c("blue","red"))
##
spi.para <- fitSCI(PRECIP,first.mon=1,distr="gamma",time.scale=6,p0=TRUE)
spi.para
spi <- transformSCI(PRECIP,first.mon=1,obj=spi.para)
plot(date,spi,t="l")
library(SCI)
install.packages("SCI")
library(SCI)
##
spi.para <- fitSCI(PRECIP,first.mon=1,distr="gamma",time.scale=6,p0=TRUE)
spi.para
spi <- transformSCI(PRECIP,first.mon=1,obj=spi.para)
plot(date,spi,t="l")
spi.1.para <- fitSCI(PRECIP,first.mon=1,time.scale=1,distr="gamma",p0=TRUE)
spi.12.para <- fitSCI(PRECIP,first.mon=1,time.scale=12,distr="gamma",p0=TRUE)
spi.1 <- transformSCI(PRECIP,first.mon=1,obj=spi.1.para)
spi.12 <- transformSCI(PRECIP,first.mon=1,obj=spi.12.para)
matplot(date,cbind(spi.1,spi.12),t="l",lty=1,col=c("red","blue"),lwd=c(1,2))
legend("topright",legend=c("time.scale=1","time.scale=12"),fill=c("red","blue"))
str(PRECIP)
str(PET)
c("PWS")
c("PWS") == "PWS"
