colmet2 <-  c("grey", "seagreen2","pink1","red" ,"orange" , "red4",
"sandybrown","#FB9A99","#56B4E9" ,"blue",
"purple2","mediumpurple")
dmet2 <- tv3_2 %>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%
mutate(Meteorology=trimws(Meteorology))%>%
dplyr::group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet2$Meteorology[dmet2$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie2_met <- dmet2%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet2, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie2_met
# colmet2 <-  c("grey", "seagreen2","pink1","red" ,"orange" , "tomato4","orangered3",
#               "sandybrown","yellow4","#56B4E9" ,"blue",
#               "purple2","mediumpurple")
colmet2 <-  c("grey", "seagreen2","pink1","red" ,"orange" , "red4",
"sandybrown","violetred4","#56B4E9" ,"blue",
"purple2","mediumpurple")
dmet2 <- tv3_2 %>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%
mutate(Meteorology=trimws(Meteorology))%>%
dplyr::group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet2$Meteorology[dmet2$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie2_met <- dmet2%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet2, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie2_met
colmet2 <-  c("grey", "seagreen2","pink1","red" ,"orange" , "red4",
"sandybrown","yellow4","#56B4E9" ,"blue",
"purple2","mediumpurple")
dmet2 <- tv3_2 %>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%
mutate(Meteorology=trimws(Meteorology))%>%
dplyr::group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet2$Meteorology[dmet2$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie2_met <- dmet2%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet2, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie2_met
source('~/Documents/ERL/plot_tv3.R')
source('~/Documents/ERL/plot_tv3.R')
pie_met
pie2_met
colmet2 <-  c("grey", "seagreen2","pink1","red" ,"orange" , "red4",
"sandybrown","yellow4","#56B4E9" ,"blue",
"purple2","mediumpurple")
dmet2 <- tv3_2 %>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%
mutate(Meteorology=trimws(Meteorology))%>%
dplyr::group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet2$Meteorology[dmet2$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie2_met <- dmet2%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet2, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie2_met
colmet <-  c( "seagreen2", "pink1","red" , "sandybrown", "skyblue", "blue","yellow","purple2")
dmet <- tv3%>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet$Meteorology <- str_trim(dmet$Meteorology)
dmet$Meteorology[dmet$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie_met <- dmet%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
# Health potint
pie_met
colmet <-  c( "seagreen2", "pink1","red" , "red5", "skyblue", "blue","yellow","purple2")
dmet <- tv3%>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet$Meteorology <- str_trim(dmet$Meteorology)
dmet$Meteorology[dmet$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie_met <- dmet%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie_met
colmet <-  c( "seagreen2", "pink1","red" , "red4", "skyblue", "blue","yellow","purple2")
dmet <- tv3%>%dplyr::select(Location, Meteorology)%>%separate_rows(Meteorology,  sep= "\\,")%>%group_by(Meteorology)%>%
dplyr::summarise(n=n())%>%dplyr::filter(!is.na(Meteorology))
dmet$Meteorology <- str_trim(dmet$Meteorology)
dmet$Meteorology[dmet$Meteorology == "Atmospheric pressure"] <- "Atmos.press."
pie_met <- dmet%>%ggplot(aes(x="", y=n, fill=Meteorology)) + geom_bar(stat="identity", width=1, alpha=0.6) +
coord_polar("y", start=0) +
geom_text(aes(label = n), color="grey10", size=10, position = position_stack(vjust = 0.5)) +
scale_fill_manual(values=colmet, name="") +
labs(x = NULL, y = NULL) +
theme_classic() + mytheme
pie_met
library("rmarkdown")
draft("MyArticle.Rmd", template = "copernicus", package = "rticles")
render("MyArticle/MyArticle.Rmd")
getwd()
knitr::include_graphics("../../Results/Logistic_Winter/Logit_biasReduced_scale_ONDJFM/map_WR_betas.png")
knitr::include_graphics("../../Results/Logistic_Winter/Logit_biasReduced_scale_ONDJFM/map_WR_betas.png")
knitr::include_graphics("../../Results/Logistic_Winter/Logit_biasReduced_scale_ONDJFM/map_WR_betas.png")
exp(0.0129)
6142/70
6142*70/100
60*120
7381
1827*12
library(plotly)
# custom grid style
axx <- list(
gridcolor='rgb(255, 255, 255)',
zerolinecolor='rgb(255, 255, 255)',
showbackground=TRUE,
backgroundcolor='rgb(230, 230,230)'
)
# individual plots
fig1 <- plot_ly(z = ~volcano, scene='scene1')
fig1 <- fig1 %>% add_surface(showscale=FALSE)
fig2 <- plot_ly(z = ~volcano, scene='scene2')
fig2 <- fig2 %>% add_surface(showscale=FALSE)
fig3 <- plot_ly(z = ~volcano, scene='scene3')
fig3 <- fig3 %>% add_surface(showscale=FALSE)
fig4 <- plot_ly(z = ~volcano, scene='scene4')
fig4 <- fig4 %>% add_surface(showscale=FALSE)
# subplot and define scene
fig <- subplot(fig1, fig2, fig3, fig4)
fig <- fig %>% layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'))
fig
z
head(volcano)
fig <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
fig
library(plotly)
# custom grid style
axx <- list(
gridcolor='rgb(255, 255, 255)',
zerolinecolor='rgb(255, 255, 255)',
showbackground=TRUE,
backgroundcolor='rgb(230, 230,230)'
)
# individual plots
fig1 <- plot_ly(z = ~volcano, scene='scene1')
fig1 <- fig1 %>% add_surface(showscale=FALSE)
fig2 <- plot_ly(z = ~volcano, scene='scene2')
fig2 <- fig2 %>% add_surface(showscale=FALSE)
fig3 <- plot_ly(z = ~volcano, scene='scene3')
fig3 <- fig3 %>% add_surface(showscale=FALSE)
fig4 <- plot_ly(z = ~volcano, scene='scene4')
fig4 <- fig4 %>% add_surface(showscale=FALSE)
# subplot and define scene
fig <- subplot(fig1, fig2, fig3, fig4)
fig <- fig %>% layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'))
fig
library(plot3D)
# number of data points.
npoints = 20
# generate sequences for X,Y values
x = runif(npoints,1,20)
y = runif(npoints,1,20)
# generate random numbers between (0,30) for Z values
z = 30*runif(npoints)
# Call to scatter3D function
scatter3D(x,y,z,box=TRUE,pch=16,bty="b2",axes=TRUE,label=TRUE, nticks=5, ticktype="detailed",theta=40, phi=40, xlab="X-val", ylab="Y-val", zlab="Z-val", main="3D scatter plot")
\textcolor{red}{where $P$ is the probability of occurrence P(ECE=1|$X_{wr}$), i.e. the probability of occurrence of an energy compound event (ECE=1) for a given WR, and $\beta_{wr}$ are the regression coefficients of the categorical variable $X_{wr}$ that represent the weather regimes classes.
+
# Comparison Unets
library(ggplot2)
library(tidyverse)
df <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_comparison_unet.csv")
df$X <- NULL
names(df) <- c("id", "n_params", "AUC", "Precision", "Recall", "N", "data")
df$data <- as.factor(df$data)
df$data <- factor(df$data, levels=c("train","test"))
met <- c("AUC","Precision", "Recall")
p_auc <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = AUC), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") +  ylab("")+ xlab("") +
theme_bw()
p_prec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Precision), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N)  +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
p_rec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Recall), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
fplot = ggpubr::ggarrange(p_auc, p_prec, p_rec, ncol=1)
library(viridis)
df <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_comparison_unet.csv")
df$X <- NULL
names(df) <- c("id", "n_params", "AUC", "Precision", "Recall", "N", "data")
df$data <- as.factor(df$data)
df$data <- factor(df$data, levels=c("train","test"))
met <- c("AUC","Precision", "Recall")
p_auc <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = AUC), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") +  ylab("")+ xlab("") +
theme_bw()
p_prec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Precision), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N)  +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
p_rec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Recall), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
fplot = ggpubr::ggarrange(p_auc, p_prec, p_rec, ncol=1)
fplot
df_rank <- read.csv("/Users/noeliaotero/Documents/CAS_ML/sorted_list_crop_train.csv")
head(df_rank)
\textcolor{blue}{Thank you for this comment. We have considered your suggestion and we have decided to slightly modify the title as:
"Characterizing renewable energy compound events across Europe using a logistic regression-based approach".
\textcolor{blue}{We have added some extra text to clarify the message (lines 411-412 in the marked-up version).
8000/500
8000/500 + 9 + 4
(7000/500) + 9 + 4
(7000/500) + 8 + 4
(7000/500) + 6 + 4
2021-1979
# Comparison Unets
library(ggplot2)
library(tidyverse)
library(viridis)
df <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_comparison_unet.csv")
df$X <- NULL
names(df) <- c("id", "n_params", "AUC", "Precision", "Recall", "N", "data")
df$data <- as.factor(df$data)
df$data <- factor(df$data, levels=c("train","test"))
met <- c("AUC","Precision", "Recall")
p_auc <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = AUC), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") +  ylab("")+ xlab("") +
theme_bw()
p_prec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Precision), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N)  +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
p_rec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Recall), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
fplot = ggpubr::ggarrange(p_auc, p_prec, p_rec, ncol=1)
df_rank <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_sort_list_crop_train.csv")
p <- ggplot(df_rank, aes(x = reorder(Variable, -Values), y = Values)) +
geom_bar(stat = "identity", fill= "steelblue3", alpha=0.9) + ylab("") +
scale_y_continuous(breaks=NULL) +
xlab("Number of input variables")  +  theme_classic() + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p
pt <- df%>%dplyr::filter(data=="train")%>%ggplot2::ggplot(aes(y=n_params, x=N, fill=id)) + geom_bar(stat="identity", position="dodge") +
scale_fill_brewer(palette="Set1", name="") +  ylab("")+ xlab("Number of input variables") + ggtitle("Number of trainable parameters") +
theme_bw() + theme(text = element_text(size=20))
pt <- pt + scale_y_continuous(labels = scales::comma)
pt
pt <- df%>%dplyr::filter(data=="train")%>%ggplot2::ggplot(aes(y=n_params, x=N, fill=id)) + geom_bar(stat="identity", position="dodge") +
scale_fill_brewer(palette="Set1", name="") +  ylab("")+ xlab("Input variables") + ggtitle("Number of trainable parameters") +
theme_bw() + theme(text = element_text(size=20))
pt <- pt + scale_y_continuous(labels = scales::comma)
ggsave(pt, file="/Users/noeliaotero/Documents/CAS_ML/Num_param_unets.png", width = 16, height = 8)
8800*70/100
64 * 7 * 9
2015-1979
2015-1979
36*51
36*51
1836/20
# Comparison Unets
library(ggplot2)
library(tidyverse)
library(viridis)
df <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_comparison_unet.csv")
df$X <- NULL
names(df) <- c("id", "n_params", "AUC", "Precision", "Recall", "N", "data")
df$data <- as.factor(df$data)
df$data <- factor(df$data, levels=c("train","test"))
met <- c("AUC","Precision", "Recall")
p_auc <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = AUC), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") +  ylab("")+ xlab("") +
theme_bw()
p_prec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Precision), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N)  +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
p_rec <- ggplot(df, aes(N, id, width = 5.9)) +
geom_tile(aes(fill = Recall), colour = "grey90") + facet_grid(~data) + scale_x_continuous(breaks = df$N) +
scale_fill_viridis(option="magma") + ylab("")+ xlab("") +
theme_bw()
fplot = ggpubr::ggarrange(p_auc, p_prec, p_rec, ncol=1)
ggsave(fplot, file="/Users/noeliaotero/Documents/CAS_ML/Fig_comparison_UNET.png", width = 10, height = 10)
##############
# Plot lines
#############
p1 <- df%>%ggplot2::ggplot(aes(N,AUC, color=id)) + geom_line()+ geom_point() + facet_grid(~data) +
scale_x_continuous(breaks = df$N) +
scale_color_brewer(palette="Set1",name="") +  ylab("")+ xlab("") + ggtitle("AUC") +
theme_bw()+theme(text = element_text(size=15))
p2 <- df%>%ggplot2::ggplot(aes(N,Precision, color=id)) + geom_line() + geom_point() + facet_grid(~data) +
scale_x_continuous(breaks = df$N) +
scale_color_brewer(palette="Set1",name="") +  ylab("")+ xlab("") +ggtitle("Precision") +
theme_bw() +
theme(text = element_text(size=15))
p3 <- df%>%ggplot2::ggplot(aes(N,Recall, color=id)) + geom_line() + geom_point() + facet_grid(~data) +
scale_x_continuous(breaks = df$N) +
scale_color_brewer(palette="Set1", name="") +  ylab("")+ xlab("") + ggtitle("Recall") +
theme_bw() + theme(text = element_text(size=15))
f2_plot = ggpubr::ggarrange(p1, p2, p3, ncol=1)
ggsave(f2_plot, file="/Users/noeliaotero/Documents/CAS_ML/Fig_comparison_UNET_lines.png", width = 10, height = 10)
###########################
# Plot ranked variables
##########################
df_rank <- read.csv("/Users/noeliaotero/Documents/CAS_ML/df_sort_list_crop_train.csv")
p <- ggplot(df_rank, aes(x = reorder(Variable, -Values), y = Values)) +
geom_bar(stat = "identity", fill= "steelblue3", alpha=0.9) + ylab("") +
scale_y_continuous(breaks=NULL) +
xlab("")  +  theme_classic() + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
p
pt <- df%>%dplyr::filter(data=="train")%>%ggplot2::ggplot(aes(y=n_params, x=N, fill=id)) + geom_bar(stat="identity", position="dodge") +
scale_fill_brewer(palette="Set1", name="") +  ylab("")+ xlab("Input variables") + ggtitle("Number of trainable parameters") +
theme_bw() + theme(text = element_text(size=20))
pt <- pt + scale_y_continuous(labels = scales::comma)
pt
df$N
unique(df$N)
df%>%dplyr::filter(data=="train")%>%ggplot2::ggplot(aes(y=n_params, x=N, fill=id)) + geom_bar(stat="identity", position="dodge") +
scale_fill_brewer(palette="Set1", name="") +  ylab("")+ xlab("Input variables") + ggtitle("Number of trainable parameters") +
theme_classic() + theme(text = element_text(size=20))
pt <- df%>%dplyr::filter(data=="train")%>%ggplot2::ggplot(aes(y=n_params, x=N, fill=id)) + geom_bar(stat="identity", position="dodge") +
scale_fill_brewer(palette="Set1", name="") +  ylab("")+ xlab("Input variables") + ggtitle("Number of trainable parameters") +
theme_classic() + theme(text = element_text(size=20))
pt + scale_y_continuous(labels = scales::comma)
pt + scale_y_continuous(labels = scales::comma, breaks = unique(df$N)
)
pt + scale_y_continuous(labels = scales::comma) +scale_x_discrete(breaks = unique(df$N))
pt + scale_y_continuous(labels = scales::comma) +scale_x_discrete(breaks = unique(df$N), labels=  unique(df$N))
pt + scale_y_continuous(labels = scales::comma) +scale_x_discrete(labels=  unique(df$N))
pt + scale_y_continuous(labels = scales::comma)
pt + scale_y_continuous(labels = scales::comma) +scale_x_continuous(breaks = c(sort(unique(df$N))),
labels = c(sort(unique(df$N)), rep(c(""), len)))
pt + scale_y_continuous(labels = scales::comma) +scale_x_continuous(breaks = c(sort(unique(df$N))),
labels = c(sort(unique(df$N)), rep(c(""), "")))
pt + scale_y_continuous(labels = scales::comma) +scale_x_continuous(breaks = c(sort(unique(df$N))),
labels = c(sort(unique(df$N)))
)
pt + scale_y_continuous(labels = scales::comma) +scale_x_continuous(breaks = c(sort(unique(df$N))),
labels = c(sort(unique(df$N))) )
pt <- pt + scale_y_continuous(labels = scales::comma) +scale_x_continuous(breaks = c(sort(unique(df$N))),
labels = c(sort(unique(df$N))) )
ggsave(pt, file="/Users/noeliaotero/Documents/CAS_ML/Num_param_unets_UP.png", width = 16, height = 8)
library(SEI)
data("data_ic2017")
data("data_supply")
ls("SEI")
ls(SEI)
library(SEI)
data("data_supply")
setwd("~/Documents/OCCR/SEI")
library(devtools)
devtools::load_all()
usethis::use_vignette("vignettes")
devtools::build_rmd()
devtools::build_rmd("vignettes/vignettes.Rmd")
install.packages("SEI")
install.packages("SEI")
usethis::use_package()
usethis::use_package("SEI")
usethis::use_data()
usethis::use_vignette("Introduction")
devtools::check()
devtools::check()
devtools::install()
install.packages ("stringi", type = "win.binary")
install.packages("stringi", type = "win.binary")
devtools::install()
devtools::check()
devtools::check()
devtools::install()
devtools::check()
devtools::install()
data(data)
devtools::check()
data("data_supply")
raw_1h <- calculate_energyindex_country(data_supply, method = "none", scale = NULL, "PWS")
raw_1h
country_str <- "Portugal"
variable_str <- "PWS"
year_vec <- 2019
sdei_reduced <- raw_1h$SDEI[[country_str]] %>% dplyr::filter(type == variable_str)
head(sdei_reduced)
plot_1h <- plot_sdei(sdei_reduced, year_vec,ivar = "SDEI")
country_str <- "Portugal"
variable_str <- "PWS"
year_vec <- "2019"
plot_1h <- plot_sdei(sdei_reduced, year_vec,ivar = "SDEI")
dd <- "date"
dx <- sdei_reduced
unique(dx$type)
length(unique(dx$type)) > 1
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5) +
geom_ribbon(aes_string(ymin=0, ymax=pmax(ivar,0)), fill="red", alpha=0.5) +
scale_x_datetime(name="Date", expand=c(0,0)) + scale_y_continuous(name=ivar, expand=expansion(c(0, 0.1))) +
#geom_hline(aes(yintercept=0), color="grey") +
#geom_hline(aes(yintercept=1), color="grey",linetype="dashed")+
#geom_hline(aes(yintercept=-1), color="grey",linetype="dashed")+
theme_bw()
yy <- year_vec
yy
yy <- 2019
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5) +
geom_ribbon(aes_string(ymin=0, ymax=pmax(ivar,0)), fill="red", alpha=0.5) +
scale_x_datetime(name="Date", expand=c(0,0)) + scale_y_continuous(name=ivar, expand=expansion(c(0, 0.1))) +
#geom_hline(aes(yintercept=0), color="grey") +
#geom_hline(aes(yintercept=1), color="grey",linetype="dashed")+
#geom_hline(aes(yintercept=-1), color="grey",linetype="dashed")+
theme_bw()
ivar <- "SDEI"
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5) +
geom_ribbon(aes_string(ymin=0, ymax=pmax(ivar,0)), fill="red", alpha=0.5) +
scale_x_datetime(name="Date", expand=c(0,0)) + scale_y_continuous(name=ivar, expand=expansion(c(0, 0.1))) +
#geom_hline(aes(yintercept=0), color="grey") +
#geom_hline(aes(yintercept=1), color="grey",linetype="dashed")+
#geom_hline(aes(yintercept=-1), color="grey",linetype="dashed")+
theme_bw()
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5) +
geom_ribbon(aes_string(ymin=0, ymax=pmax(ivar,0)), fill="red", alpha=0.5) +
scale_x_datetime(name="Date", expand=c(0,0)) + scale_y_continuous(name=ivar, expand=expansion(c(0, 0.1)))
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5) +
geom_ribbon(aes_string(ymin=0, ymax=pmax(ivar,0)), fill="red", alpha=0.5) +
scale_x_datetime(name="Date", expand=c(0,0)) + scale_y_continuous(name=ivar, expand=expansion(c(0, 0.1)))
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) +
geom_ribbon(aes_string(ymin=pmin(ivar,0), ymax=0), fill="blue", alpha=0.5)
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot( aes_string(x=date,y=ivar)) + geom_line()
dx%>%dplyr::filter(format(date,"%Y")%in%yy)
dx%>%dplyr::filter(format(date,"%Y")%in%yy)%>%ggplot2::ggplot( aes_string(x=date,y=ivar)) + geom_line()
source("~/Documents/OCCR/SEI/R/plot_sdei.R")
plot_1h <- plot_sdei(sdei_reduced, year_vec,ivar = "SDEI")
plot_sdei
ggplot2::ggplot(xx, aes_string(x=date,y=ivar)) + geom_line()
xx <- dx%>%dplyr::filter(format(date,"%Y")%in%yy)
xx
ivar
ggplot2::ggplot(xx, aes_string(x=date,y=ivar)) + geom_line()
ggplot2::ggplot(xx, aes_string(x=dd,y=ivar)) + geom_line()
source("~/Documents/OCCR/SEI/R/plot_sdei.R")
plot_1h <- plot_sdei(sdei_reduced, year_vec,ivar = "SDEI")
plot_1h
devtools::check()
devtools::install()
plot_1h
plot_1h + ylab("ylabb")
ylabb <- if(variable_str == "res_load_WS"){"RL (GW)"}else if(variable_str == "PWS"){"REP (GW)"}else{""}
plot_1h + ylab(ylabb)
class(plot_1h)
plot_1h + ylab("test")
plot_1h + labs(y="test")
library(ggplot2)
plot_1h + labs(y="test")
shiny::runApp('~/Documents/OCCR/SEI-Demo')
runApp('~/Documents/OCCR/SEI-Demo')
