% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_dist.R
\name{fit_dist}
\alias{fit_dist}
\title{Fit a distribution to data}
\usage{
fit_dist(data, dist, method = "mle", preds = NULL, n_thres = 20, ...)
}
\arguments{
\item{data}{A numeric vector.}

\item{dist}{character string specifying the distribution to be fit to the data;
one of \code{'empirical'}, \code{'kde'}, \code{'norm'}, \code{'lnorm'}, \code{'logis'}, \code{'llogis'},
\code{'exp'}, \code{'gamma'}, and \code{'weibull'}.}

\item{method}{A character string coding for the fitting method: 
    \code{"mle"} for 'maximum likelihood estimation', \code{"mme"} for 'moment matching estimation', 
    \code{"qme"} for 'quantile matching estimation', \code{"mge"} for 'maximum goodness-of-fit estimation'
    and \code{"mse"} for 'maximum spacing estimation'.}

\item{n_thres}{minimum number of data points required to estimate the distribution;
default is 20.}

\item{...}{additional arguments to be passed to \code{\link{fitdistrplus::fitdist}}}
}
\value{
A list containing the estimated distribution function, its parameters,
and Kolmogorov-Smirnov goodness-of-fit statistics.
}
\description{
Function to fit a specified distribution to a vector of data.
Returns the estimated distribution and relevant goodness-of-fit statistics.
}
\details{
This has been adapted from code available at
\url{https://github.com/WillemMaetens/standaRdized}.

\code{data} is a numeric vector of data from which the distribution is to be estimated.

\code{dist} is the specified distribution to be fit to \code{data}. This must be one of
'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', and 'weibull'.
'empirical' returns the empirical distribution function of \code{data}, 'kde' applies
(normal) kernel density estimation to \code{data}, while 'norm', 'lnorm', 'logis',
'llogis', 'exp', 'gamma', and 'weibull' correspond to the normal, log-normal, logistic,
log-logistic, exponential, gamma, and Weibull distributions, respectively.

By default, \code{dist = 'empirical'}, in which case the distribution is estimated
empirically from \code{data}. This is only recommended if there are at least 100 values
in \code{data}, and a warning message is returned otherwise.

\code{n_thres} is the minimum number of observations required to fit the distribution.
The default is \code{n_thres = 20}. If the number of values in \code{data} is
smaller than \code{na_thres}, an error is returned. This guards against over-fitting,
which can result in distributions that do not generalise well out-of-sample.

\code{method} determines the method used to estimate the distribution parameters.
This argument is redundant if \code{dist = 'empirical'} or \code{dist = 'kde'}.
Otherwise, \code{fit_dist} essentially provides a wrapper for \code{\link[fitdistrplus]{fitdist}},
and further details can be found in the corresponding documentation. Additional arguments
to \code{\link[fitdistrplus]{fitdist}} can also be specified via \code{...}.
Where relevant, the default is to estimate parameters using maximum likelihood estimation.
Parameter estimation is also possible using L-moment matching (\code{method = 'lmme'}),
for all distribution choices except the log-logistic distribution.
}
\examples{
N <- 1000
shape <- 3
rate <- 2

x <- seq(0, 10, 0.01)

### gamma distribution

# maximum likelihood
data <- rgamma(N, shape, rate)
out <- fit_dist(data, dist = "gamma")
hist(data, breaks = 30, probability = TRUE)
lines(x, dgamma(x, out$params[1], out$params[2]), col = "blue")

# method of moments
out <- fit_dist(data, dist = "gamma", method = "mme")
hist(data, breaks = 30, probability = TRUE)
lines(x, dgamma(x, out$params[1], out$params[2]), col = "blue")

# method of l-moments
out <- fit_dist(data, dist = "gamma", method = "lmme")
hist(data, breaks = 30, probability = TRUE)
lines(x, dgamma(x, out$params[1], out$params[2]), col = "blue")


## weibull distribution

# maximum likelihood
data <- rweibull(N, shape, 1/rate)
out <- fit_dist(data, dist = "weibull")
hist(data, breaks = 30, probability = TRUE)
lines(x, dweibull(x, out$params[1], out$params[2]), col = "blue")

# method of l-moments
out <- fit_dist(data, dist = "weibull", method = "lmme")
hist(data, breaks = 30, probability = TRUE)
lines(x, dweibull(x, out$params[1], out$params[2]), col = "blue")


## exponential distribution

# method of moments
out <- fit_dist(data, dist = "exp", method = "mme")
hist(data, breaks = 30, probability = TRUE)
lines(x, dexp(x, out$params), col = "blue")


## logistic distribution

x <- seq(-10, 20, 0.01)

# maximum likelihood
data <- rlogis(N, shape, rate)
out <- fit_dist(data, dist = "logis")
hist(data, breaks = 30, probability = TRUE)
lines(x, dlogis(x, out$params[1], out$params[2]), col = "blue")



##### non-stationary estimation using gamlss

## normal distribution
data <- rnorm(N, x[1:N] + shape, exp(x/10))
plot(data)
preds <- data.frame(t = x[1:N])

out_st <- fit_dist(data, dist = "norm")
out_nst <- fit_dist(data, dist = "norm", preds = preds)
out_nst2 <- fit_dist(data, dist = "norm", preds = preds, sigma.formula = ~ .)

pit_st <- out_st$F_x(data, out_st$params) # pit values without trend
hist(pit_st)
pit_nst <- out_nst$F_x(data, out_nst$params, preds) # pit values with trend in mean
hist(pit_nst)
pit_nst2 <- out_nst2$F_x(data, out_nst2$params, preds) # pit values with trend in mean and sd
hist(pit_nst2)

## log normal distribution
x <- seq(0.01, 10, length.out = N)
data <- rlnorm(N, (x + shape)/3, 1/rate)
plot(data)
preds <- data.frame(t = x)

out <- fit_dist(data, dist = "lnorm", preds = preds)
pit <- out$F_x(data, out$params, preds)
hist(pit)


}
\seealso{
\code{\link[fitdistrplus]{fitdist}}
}
