[{"path":"https://noeliaof.github.io/SEI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Allen. Author, maintainer. Noelia Otero. Author.","code":""},{"path":"https://noeliaof.github.io/SEI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allen S, Otero N (2024). SEI: Calculating Standardised Indices. R package version 0.1.1, https://noeliaof.github.io/SEI/, https://github.com/noeliaof/SEI.","code":"@Manual{,   title = {SEI: Calculating Standardised Indices},   author = {Sam Allen and Noelia Otero},   year = {2024},   note = {R package version 0.1.1, https://noeliaof.github.io/SEI/},   url = {https://github.com/noeliaof/SEI}, }"},{"path":"https://noeliaof.github.io/SEI/index.html","id":"sei","dir":"","previous_headings":"","what":"SEI","title":"SEI","text":"SEI R package calculate standardised indices. Standardised indices frequently used convert measurements common scale meaningful probabilistic interpretation. Well-known examples include Standardised Precipitation Index (SPI) Standardised Precipitation Evapotranspiration Index (SPEI), used monitor hydrological droughts. Standardised indices also recently proposed monitor energy droughts, including Standardised Residual Load Index (SRLI), Standardised Renewable Energy Production Index (SREPI). standardised energy indices discussed > Allen, S. Otero, N (2023). > Standardised indices monitor energy droughts. > Renewable Energy. > https://doi.org/10.1016/j.renene.2023.119206 package facilitates implementation standardised indices practice. SEI package includes - range distributions calculate standardised indices (including flexible non- semi-parametric methods), - Diagnostic checks ensure chosen distribution valid input data, - ability compute indices rolling window values, - ability compute indices timescale, - Several notions standardised indices.","code":""},{"path":"https://noeliaof.github.io/SEI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SEI","text":"developmental version can installed using devtools: vignette lists several possible extensions implemented. Additional comments, suggestions, input welcome.","code":"# install.packages(\"devtools\") library(devtools) install_github(\"noeliaof/SEI\", build_vignettes = TRUE)"},{"path":"https://noeliaof.github.io/SEI/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"SEI","text":"Standardised indices provide means convert measurements common interpretable scale. useful many reasons. example: 1) common scale renders indices easy interpret. 2) standardised scale also underlying probabilistic interpretation, making indices ideal risk management decision-making. 3) Since standardisation can performed separately different conditions (e.g. different seasons locations), indices can defined relative sense, facilitating comparison measurements different conditions. general approach compute indices estimate cumulative distribution function F underlying measurements, use derive probability integral transform (PIT) values, transform PIT values using Gaussian quantile function. F estimated accurately, resulting values resemble sample standard normal distribution. negative value represents measurement lower average, positive value represents -average measurement. high low index constitutes extreme value, can deduce extreme value comparing quantiles standard normal distribution. main challenge calculating standardised indices estimating cumulative distribution function F measurements. can achieved assuming parametric distribution: SPI, example, typically assumes precipitation follows gamma distribution. Alternatively, can use kernel density estimation empirical distribution function get flexible estimate; however, methods typically require data parametric distributions. case, important check estimated distribution valid. package offers wide range distributions, additionally provides diagnostic tools check chosen distribution adequately fits input data. theory underlying standardised indices discussed detail package vignette.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate values in xts objects — aggregate_xts","title":"Aggregate values in xts objects — aggregate_xts","text":"Inputs xts time series outputs xts time series whose values aggregated moving window user-specified length.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate values in xts objects — aggregate_xts","text":"","code":"aggregate_xts(   x,   agg_period = 1,   agg_scale = c(\"days\", \"mins\", \"hours\", \"weeks\", \"months\", \"years\"),   agg_fun = \"sum\",   timescale = c(\"days\", \"mins\", \"hours\", \"weeks\", \"months\", \"years\"),   na_thres = 10 )"},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate values in xts objects — aggregate_xts","text":"x xts object aggregated. agg_period length aggregation period. agg_scale timescale agg_period; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. agg_fun string specifying function used aggregate data aggregation period, default 'sum'. timescale timescale data; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. na_thres threshold percentage NA values allowed aggregation period; default 10%.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate values in xts objects — aggregate_xts","text":"xts time series aggregated values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate values in xts objects — aggregate_xts","text":"adapted code available https://github.com/WillemMaetens/standaRdized. Given vector \\(x_{1}, x_{2}, \\dots\\), function aggregate_xts calculates aggregated values \\(\\tilde{x}_{1}, \\tilde{x}_{2}, \\dots\\) $$\\tilde{x}_{t} = f(x_{t}, x_{t-1}, \\dots, x_{t - k + 1}),$$ time point \\(t = k, k + 1, \\dots\\), \\(k\\) (agg_period) number time units (agg_scale) aggregate time series (x), \\(f\\) (agg_fun) function used perform aggregation. first \\(k - 1\\) values aggregated time series returned NA. default, agg_fun = \"sum\", meaning aggregation results accumulations aggregation period: $$\\tilde{x}_{t} = \\sum_{k=1}^{K} x_{t - k + 1}.$$ Alternative functions can also used. example, specifying agg_fun = \"mean\" returns mean aggregation period, $$\\tilde{x}_{t} = \\frac{1}{K} \\sum_{k=1}^{K} x_{t - k + 1},$$ agg_fun = \"max\" returns maximum aggregation period, $$\\tilde{x}_{t} = \\text{max}(\\{x_{t}, x_{t-1}, \\dots, x_{t - k + 1}\\}).$$ agg_period single numeric value specifying many time units data x aggregated. default, agg_period assumed correspond number days, can also specified manually using argument agg_scale. timescale timescale input data x. default, also assumed \"days\". Since time series x aggregates data aggregation period, problems may arise x contains missing values. example, interest daily accumulations, 50% values aggregation period missing, accumulation aggregation period accurate. can controlled using argument na_thres. na_thres specifies percentage NA values aggregation period NA value returned. .e. proportion values allowed missing. default na_thres = 10.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregate values in xts objects — aggregate_xts","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate values in xts objects — aggregate_xts","text":"","code":"# \\donttest{  data(data_supply, package = \"SEI\")  # consider hourly German energy production data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date)  # daily accumulations supply_de_daily <- aggregate_xts(supply_de, timescale = \"hours\")  # weekly means supply_de_weekly <- aggregate_xts(supply_de, agg_scale = \"weeks\",                                   agg_fun = \"mean\", timescale = \"hours\")  plot(supply_de, main = \"Hourly energy production\")  plot(supply_de_daily, main = \"Daily accumulated energy production\")  plot(supply_de_weekly, main = \"Weekly averaged energy production\")   # }"},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of wind and solar energy production — data_supply","title":"Time series of wind and solar energy production — data_supply","text":"dataset contains hourly time series wind solar energy production 27 European countries 2019.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of wind and solar energy production — data_supply","text":"","code":"data(\"data_supply\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series of wind and solar energy production — data_supply","text":"object type data.frame containing 3 variables: date POSIXct series times energy production available. country country energy production measurement corresponds. PWS hourly wind solar energy production corresponding time country.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series of wind and solar energy production — data_supply","text":"dataframe data_supply contains 236520 (24 x 365 x 27) rows, containing wind solar energy production hour 2019 27 countries. corresponds subset data used Bloomfield Brayshaw (2021), can accessed https://researchdata.reading.ac.uk/321/. Users referred paper details.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time series of wind and solar energy production — data_supply","text":"Bloomfield, Hannah Brayshaw, David (2021): ERA5 derived time series European aggregated surface weather variables, wind power, solar power capacity factors: hourly data 1950-2020. doi:10.17864/1947.000321","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of wind and solar energy production — data_supply","text":"","code":"data(\"data_supply\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of average wind speed in Germany — data_wind_de","title":"Time series of average wind speed in Germany — data_wind_de","text":"dataset contains daily time series average wind speeds across Germany 1979 2019.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of average wind speed in Germany — data_wind_de","text":"","code":"data(\"data_wind_de\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series of average wind speed in Germany — data_wind_de","text":"object type data.frame containing 2 variables: date POSIXct series times average wind speeds available. wsmean average wind speed Germany corresponding time.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series of average wind speed in Germany — data_wind_de","text":"dataframe data_wind_de contains 14975 (365 x 41 + 10) rows, containing daily average wind speed Germany 41 years 1979 2019. Ten leap years occur within period. corresponds subset data publicly available https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-pressure-levels?tab=overview. Users referred reference details.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time series of average wind speed in Germany — data_wind_de","text":"Hersbach, H et al. (2023): ERA5 hourly data single levels 1940 present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS) doi:10.24381/cds.adbb2d47  Accessed 01-09-2022.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of average wind speed in Germany — data_wind_de","text":"","code":"data(\"wind_de\") #> Warning: data set ‘wind_de’ not found"},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a distribution to data — fit_dist","title":"Fit a distribution to data — fit_dist","text":"Function fit specified distribution vector data. Returns estimated distribution relevant goodness--fit statistics.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a distribution to data — fit_dist","text":"","code":"fit_dist(data, dist, method = \"mle\", preds = NULL, n_thres = 10, ...)"},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a distribution to data — fit_dist","text":"data numeric vector. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. preds data frame predictor variables estimated distribution depend. n_thres minimum number data points required estimate distribution; default 10. ... additional arguments passed fitdist gamlss","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a distribution to data — fit_dist","text":"list containing estimated distribution function (F_x), parameters (params), properties fit AIC Kolmogorov-Smirnov goodness--fit statistic (fit). estimated distribution function depends covariates, gamlss model fit returned parameters.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a distribution to data — fit_dist","text":"adapted code available https://github.com/WillemMaetens/standaRdized. data numeric vector data distribution estimated. dist specified distribution fit data. must one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. correspond following distributions: 'empirical' returns empirical distribution function data, 'kde' applies (normal) kernel density estimation data, 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull' correspond normal, log-normal, logistic, log-logistic, exponential, gamma, Weibull distributions, respectively. default, dist = 'empirical', case distribution estimated empirically data. recommended least 100 values data, warning message returned otherwise. Parametric distributions appropriate relatively little data, good reason expect data follows particular distribution. Kernel density estimation dist = 'kde' provides flexible compromise using empirical methods parametric distributions. n_thres minimum number observations required fit distribution. default n_thres = 10. number values data smaller na_thres, error returned. guards -fitting, can result distributions generalise well --sample. method specifies method used estimate distribution parameters. argument redundant dist = 'empirical' dist = 'kde'. Otherwise, fit_dist essentially provides wrapper fitdist, details can found corresponding documentation. Additional arguments fitdist can also specified via .... relevant, default estimate parameters using maximum likelihood estimation, method = \"mle\", though several alternative methods also available; see fitdist. Parameter estimation also possible using L-moment matching (method = 'lmme'), distribution choices except log-logistic distribution. case, fit_dist essentially wrapper lmom package. distribution can also non-stationary, depending predictor variables covariates. predictors can included via argument preds, data frame separate column predictor, number rows equal length data. case, Generalized Additive Model Location, Scale, Shape (GAMLSS) fit data using predictors preds. assumed mean distribution depends linearly predictors. Variable arguments ... can also used specify relationships scale shape parameters distribution predictors; see examples . case, fit_dist essentially wrapper gamlss, users referred corresponding documentation implementation details.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a distribution to data — fit_dist","text":"Rigby, R. ., & Stasinopoulos, D. M. (2005): `Generalized additive models location, scale shape', Journal Royal Statistical Society Series C: Applied Statistics 54, 507-554. https://doi.org/10.1111/j.1467-9876.2005.00510.x Delignette-Muller, M. L., & Dutang, C. (2015): `fitdistrplus: R package fitting distributions', Journal Statistical Software 64, 1-34. https://doi.org/10.18637/jss.v064.i04 Allen, S. & N. Otero (2023): `Standardised indices monitor energy droughts', Renewable Energy 217, 119206. https://doi.org/10.1016/j.renene.2023.119206","code":""},{"path":[]},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a distribution to data — fit_dist","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a distribution to data — fit_dist","text":"","code":"N <- 1000 shape <- 3 rate <- 2  x <- seq(0, 10, 0.01)  ### gamma distribution  # maximum likelihood data <- rgamma(N, shape, rate) out <- fit_dist(data, dist = \"gamma\") hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")   # method of moments out <- fit_dist(data, dist = \"gamma\", method = \"mme\") hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")   # method of l-moments out <- fit_dist(data, dist = \"gamma\", method = \"lmme\") hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")    ## weibull distribution  # maximum likelihood data <- rweibull(N, shape, 1/rate) out <- fit_dist(data, dist = \"weibull\") hist(data, breaks = 30, probability = TRUE) lines(x, dweibull(x, out$params[1], out$params[2]), col = \"blue\")   # method of l-moments out <- fit_dist(data, dist = \"weibull\", method = \"lmme\") hist(data, breaks = 30, probability = TRUE) lines(x, dweibull(x, out$params[1], out$params[2]), col = \"blue\")    ## exponential distribution  # method of moments out <- fit_dist(data, dist = \"exp\", method = \"mme\") hist(data, breaks = 30, probability = TRUE) lines(x, dexp(x, out$params), col = \"blue\")    ## logistic distribution  x <- seq(-10, 20, 0.01)  # maximum likelihood data <- rlogis(N, shape, rate) out <- fit_dist(data, dist = \"logis\") hist(data, breaks = 30, probability = TRUE) lines(x, dlogis(x, out$params[1], out$params[2]), col = \"blue\")     ##### non-stationary estimation using gamlss  ## normal distribution x <- seq(-10, 20, length.out = N) data <- rnorm(N, x + shape, exp(x/10)) plot(data)  preds <- data.frame(t = x)  out_st <- fit_dist(data, dist = \"norm\") out_nst <- fit_dist(data, dist = \"norm\", preds = preds) #> GAMLSS-RS iteration 1: Global Deviance = 5035.731  #> GAMLSS-RS iteration 2: Global Deviance = 5035.731  out_nst2 <- fit_dist(data, dist = \"norm\", preds = preds, sigma.formula = ~ .) #> GAMLSS-RS iteration 1: Global Deviance = 3787.776  #> GAMLSS-RS iteration 2: Global Deviance = 3779.806  #> GAMLSS-RS iteration 3: Global Deviance = 3779.806   # pit values without trend pit_st <- out_st$F_x(data, out_st$params) hist(pit_st, breaks = 30, probability = TRUE, main = \"No trend\") abline(1, 0, col = \"red\", lty = \"dotted\")  # pit values with trend in mean pit_nst <- out_nst$F_x(data, out_nst$params, preds) hist(pit_nst, breaks = 30, probability = TRUE, main = \"Trend in mean\") abline(1, 0, col = \"red\", lty = \"dotted\")  # pit values with trend in mean and sd pit_nst2 <- out_nst2$F_x(data, out_nst2$params, preds) hist(pit_nst2, breaks = 30, probability = TRUE, main = \"Trend in mean and standard deviation\") abline(1, 0, col = \"red\", lty = \"dotted\")    ## log normal distribution x <- seq(0.01, 10, length.out = N) data <- rlnorm(N, (x + shape)/3, 1/rate) plot(data)  preds <- data.frame(t = x)  out <- fit_dist(data, dist = \"lnorm\", preds = preds) #> GAMLSS-RS iteration 1: Global Deviance = 6776.554  #> GAMLSS-RS iteration 2: Global Deviance = 6776.554  pit <- out$F_x(data, out$params, preds) hist(pit, breaks = 30, probability = TRUE, main = \"PIT values for non-stationary fit\") abline(1, 0, col = \"red\", lty = \"dotted\")"},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":null,"dir":"Reference","previous_headings":"","what":"Get drought characteristics — get_drought","title":"Get drought characteristics — get_drought","text":"Extract characteristics droughts time series values. Drought characteristics include occurrence, intensity, magnitude, duration drought.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get drought characteristics — get_drought","text":"","code":"get_drought(   x,   thresholds = c(1.28, 1.64, 1.96),   exceed = TRUE,   cluster = 0,   lag = NULL )"},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get drought characteristics — get_drought","text":"x vector xts object droughts defined. thresholds numeric vector containing thresholds use defining droughts. exceed logical; TRUE drought defined x thresholds, FALSE otherwise. cluster integer specifying number time steps droughts clustered. lag numeric specifying value drought end.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get drought characteristics — get_drought","text":"data frame containing original values x corresponding drought characteristics.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get drought characteristics — get_drought","text":"drought assumed defined instance vector x exceeds (exceed = TRUE) falls (exceed = FALSE) specified thresholds thresholds. thresholds can single value, vector values. latter case, threshold assumed different level intensity drought. exceed = TRUE higher threshold corresponds higher intensity, exceed = FALSE lower threshold corresponds higher intensity. example, thresholds = c(1, 1.5, 2), level 1 drought occurs whenever x exceeds 1 lower 1.5, level 2 drought occurs whenever x exceeds 1.5 lower 2, level 3 drought occurs whenever x exceeds 2. default, thresholds = c(1.28, 1.64, 1.96), corresponds 90th, 95th, 97.5th percentiles standard normal distribution. thresholds often used alongside standardised indices define hydrometeorological droughts; see references. cluster represents number time steps different drought events attributed drought. example, suppose \\(x_{} \\geq t, x_{+ 1} < t, x_{+ 2} \\geq t\\), \\(x_{}\\) represents \\(\\)-th value x, \\(t\\) lowest threshold thresholds. case, one drought event finish time point \\(\\) new drought event begin time point \\(+ 2\\); drought occur time point \\(+ 1\\) value \\(x_{+ 1}\\) threshold defining drought. Since \\(x_{}\\) \\(x_{+ 2}\\) classed drought events, may desirable ignore fluctuation, assume drought persists \\(x_{+ 1}\\) despite value. can achieved setting cluster = 1. two time points separating different drought events, can clustered together setting cluster = 2, . default clustering implemented, .e. cluster = 0. Alternatively, may wish assume drought persists x falls value necessarily equal threshold defining drought. example, hydrometeorological droughts based standardised indices, Standardised Precipitation Index (SPI), often defined persist standardised index changes sign, .e. falls zero. can achieved setting lag = 0. generally, lag can numerical value. exceed = TRUE, warning issued lag lowest threshold, exceed = FALSE, warning issued lag highest threshold. lag NULL (default), lagging performed. get_drought() currently use time series information xts input, thereby assuming time series complete, without missing time periods. x vector, rather xts object, also implicitly assumed. output dataframe containing vector x, logical vector specifying whether value x corresponds drought event, magnitude drought, defined sum values x drought; see references. magnitude drought shown last day drought. makes easier compute statistics drought magnitude, average drought magnitude. thresholds vector, intensity level drought also returned.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get drought characteristics — get_drought","text":"McKee, T. B., Doesken, N. J., & Kleist, J. (1993): `relationship drought frequency duration time scales', Proceedings 8th Conference Applied Climatology 17, 179-183. Vicente-Serrano, S. M., Beguería, S., & López-Moreno, J. . (2010): `multiscalar drought index sensitive global warming: standardized precipitation evapotranspiration index', Journal Climate 23, 1696-1718. https://doi.org/10.1175/2009JCLI2909.1 Allen, S. & N. Otero (2023): `Standardised indices monitor energy droughts', Renewable Energy 217, 119206. https://doi.org/10.1016/j.renene.2023.119206","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get drought characteristics — get_drought","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get drought characteristics — get_drought","text":"","code":"data(data_supply)  # consider daily German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) supply_de_std <- std_index(supply_de, rescale = \"days\", timescale = \"hours\")  # a drought may correspond to when energy supply is low drought_df <- get_drought(supply_de_std, thresholds = c(-1.28, -1.64, -1.96), exceed = FALSE) head(drought_df) #>                 Index          x ins occ dur mag #> 1 2019-01-01 23:00:00  1.6279182   0   0   0   0 #> 2 2019-01-02 23:00:00  1.1486964   0   0   0   0 #> 3 2019-01-03 23:00:00 -0.6468776   0   0   0   0 #> 4 2019-01-04 23:00:00  0.6809347   0   0   0   0 #> 5 2019-01-05 23:00:00  0.8261494   0   0   0   0 #> 6 2019-01-06 23:00:00 -1.2466276   0   0   0   0 mean(drought_df$occ) # droughts occur on roughly 10% of time steps #> [1] 0.09589041  # cluster droughts two time steps apart drought_df <- get_drought(supply_de_std, thresholds = c(-1.28, -1.64, -1.96),                           cluster = 2, exceed = FALSE) mean(drought_df$occ) # droughts occur on roughly 11% of time steps #> [1] 0.109589  # let droughts persist until the standardised index changes sign drought_df <- get_drought(supply_de_std, thresholds = c(-1.28, -1.64, -1.96),                           lag = 0, exceed = FALSE) mean(drought_df$occ) # droughts occur on roughly 17% of time steps #> [1] 0.1671233"},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability integral transform values — get_pit","title":"Calculate probability integral transform values — get_pit","text":"Function estimate cumulative distribution function (CDF) set observations, return corresponding probability integral transform (PIT) values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability integral transform values — get_pit","text":"","code":"get_pit(   x_ref,   x_new = x_ref,   dist = \"empirical\",   preds_ref = NULL,   preds_new = preds_ref,   method = \"mle\",   return_fit = FALSE,   lower = -Inf,   upper = Inf,   cens = NULL,   n_thres = 10,   ... )"},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability integral transform values — get_pit","text":"x_ref numeric vector estimate CDF. x_new numeric vector calculate PIT values. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. preds_ref data frame predictor variables estimated distribution depend, corresponding reference observations x_ref. preds_new data frame predictor variables estimated distribution depend, corresponding new observations x_new. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. return_fit logical specifying whether return parameters goodness--fit statistics distribution fit. lower, upper numeric values specifying lower upper bounds values x_ref x_new censored. cens method used deal censoring PIT values; either string ('normal' 'prob'), corresponding common choices, custom numeric value. n_thres minimum number data points required estimate distribution; default 10. ... additional arguments passed fitdist gamlss","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability integral transform values — get_pit","text":"vector PIT values return_fit = FALSE, , return_fit = TRUE, list containing estimated distribution function (F_x), parameters (params), properties fit AIC Kolmogorov-Smirnov goodness--fit statistic (fit). estimated distribution function depends covariates, gamlss model fit returned parameters.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability integral transform values — get_pit","text":"Continuous data \\(X\\) continuous random variable cumulative distribution function (CDF) \\(F\\), probability integral transform (PIT) \\(F(X)\\) uniformly distributed 0 1. Given vector \\(x_{1}, \\dots, x_{n}\\) realisations \\(X\\), get_pit produces estimate \\(\\hat{F}\\) CDF \\(F\\), returns vector PIT values corresponding another set realisations \\(z_{1}, \\dots, z_{N}\\), $$\\hat{F}(z_{1}), \\dots, \\hat{F}(z_{n}).$$ x_ref contains values \\(x_{1}, \\dots, x_{n}\\) CDF estimate \\(\\hat{F}\\) obtained. x_new contains values \\(z_{1}, \\dots, z_{n}\\) PIT values \\(\\hat{F}(z_{1}), \\dots, \\hat{F}(z_{n})\\) calculated. default, x_ref x_new , PIT values calculated -sample. estimate distribution, get_pit calls fit_dist. arguments dist, method n_thres documented detail corresponding help page. check chosen distribution adequately fits data, argument return_fit = TRUE can used return estimated parameters distribution, well properties fit AIC p-value Kolmogorov-Smirnov goodness--fit test. Non-stationary distributions estimated distribution can also non-stationary, depending predictor variables covariates. predictors can included via arguments preds_ref preds_new, data frames separate column predictor, numbers rows equal lengths x_ref x_new, respectively. case, Generalized Additive Model Location, Scale, Shape (GAMLSS) fit x_ref using predictors preds_ref. PIT values corresponding x_new calculated applying estimated distribution predictors preds_new. non-stationary distribution estimated, preds_ref preds_new must provided. default, preds_new assumed preds_ref, align x_new x_ref. Censored data random variable \\(X\\) continuous, PIT uniformly distributed. relevant case \\(X\\) censored. example, precipitation censored zero. results several PIT values equal \\(F(0)\\). lower upper arguments get_pit allow user specify lower upper bounds data censored; default lower = -Inf upper = Inf, .e. censoring. PIT values used construct standardised indices, censoring can lead unintuitive index values. deal censored data, proposed map PIT values censored values different constant \\(c\\); see references. example, precipitation, PIT values become $$F(X) \\quad \\text{} \\quad X > 0,$$ $$c \\quad \\text{} \\quad X = 0.$$ constant \\(c\\) can chosen PIT values satisfy desired property. example, \\(F(X)\\) uniformly distributed 0 1, mean equal \\(1/2\\). Hence, \\(c\\) chosen mean PIT values censored distribution equal \\(1/2\\). Alternatively, \\(F(X)\\) uniformly distributed 0 1, transformed PIT value \\(\\Phi^{-1}(F(X))\\) (\\(\\Phi^{-1}\\) quantile function standard normal distribution) follows standard normal distribution, therefore mean equal 0. constant \\(c\\) therefore chosen mean transformed PIT values censored distribution equal 0. argument cens get_pit can used treat censored data. cens can one three options: single numeric value containing value \\(c\\) assign PIT values censored realisations; string 'prob' \\(c\\) chosen automatically mean PIT values equal \\(1/2\\); string 'normal' \\(c\\) chosen automatically mean transformed PIT values equal 0. data censored , cens must numeric vector length two, specifying values assign realisations censored . data censored, dist corresponds distribution used estimate uncensored realisations, e.g. positive precipitations. probability boundary points estimated using relative frequency censored observations x_ref.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate probability integral transform values — get_pit","text":"Rigby, R. ., & Stasinopoulos, D. M. (2005): `Generalized additive models location, scale shape', Journal Royal Statistical Society Series C: Applied Statistics 54, 507-554. https://doi.org/10.1111/j.1467-9876.2005.00510.x Stagge, J. H., Tallaksen, L. M., Gudmundsson, L., Van Loon, . F., & Stahl, K. (2015): `Candidate distributions climatological drought indices (SPI SPEI)', International Journal Climatology 35, 4027-4040. https://doi.org/10.1002/joc.4267 Allen, S. & N. Otero (2023): `Calculating standardised indices using SEI', EarthArXiv pre-print. https://doi.org/10.31223/X5GM4G","code":""},{"path":[]},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate probability integral transform values — get_pit","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability integral transform values — get_pit","text":"","code":"N <- 1000 shape <- 3 rate <- 2  x_ref <- rgamma(N, shape, rate) x_new <- rgamma(N, shape, rate)  # empirical distribution pit <- get_pit(x_ref, x_new) hist(pit)   # gamma distribution pit <- get_pit(x_ref, x_new, dist = \"gamma\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dgamma(seq(0, 10, 0.01), pit$params[1], pit$params[2]), col = \"blue\")    # weibull distribution pit <- get_pit(x_ref, x_new, dist = \"weibull\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dweibull(seq(0, 10, 0.01), pit$params[1], pit$params[2]), col = \"blue\")    # exponential distribution pit <- get_pit(x_ref, x_new, dist = \"exp\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dexp(seq(0, 10, 0.01), pit$params[1]), col = \"blue\")    # gamma distribution with censoring x_ref <- c(x_ref, numeric(N)) pit <- get_pit(x_ref, dist = \"gamma\", lower = 0, cens = \"prob\") hist(pit)  mean(pit) # = 1/2 #> [1] 0.500608 mean(qnorm(pit)) # != 0 #> [1] 0.06237125  pit <- get_pit(x_ref, dist = \"gamma\", lower = 0, cens = \"normal\") hist(qnorm(pit))  mean(pit) # != 1/2 #> [1] 0.4818424 mean(qnorm(pit)) # = 0 #> [1] 0.0006738413   ## normal distribution with trend in mean x <- seq(-10, 20, length.out = N) x_ref <- rnorm(N, x + shape, 2) plot(x_ref)  preds <- data.frame(t = x)  pit <- get_pit(x_ref, preds_ref = preds, dist = \"norm\") #> GAMLSS-RS iteration 1: Global Deviance = 4204.338  #> GAMLSS-RS iteration 2: Global Deviance = 4204.338  hist(pit)   ## normal distribution with trend in mean and standard deviation x_ref <- rnorm(N, x + shape, exp(x/10)) plot(x_ref)  preds <- data.frame(t = x)  pit <- get_pit(x_ref, preds_ref = preds, dist = \"norm\", sigma.formula = ~ .) #> GAMLSS-RS iteration 1: Global Deviance = 3833.889  #> GAMLSS-RS iteration 2: Global Deviance = 3829.376  #> GAMLSS-RS iteration 3: Global Deviance = 3829.376  hist(pit)  # sigma.formula is an optional argument in the gamlss::gamlss function"},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot standardised indices — plot_sei","title":"Plot standardised indices — plot_sei","text":"Plot time series histogram standardised indices.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot standardised indices — plot_sei","text":"","code":"plot_sei(   x,   type = c(\"ts\", \"hist\", \"bar\"),   title = NULL,   lab = \"Std. Index\",   xlims = NULL,   ylims = NULL,   n_bins = 30 )"},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot standardised indices — plot_sei","text":"x vector xts object containing indices plotted. type type plot (either time series \"ts\", histogram \"hist\", barplot \"bar\"). title optional title plot. lab axis label. xlims, ylims lower upper limits axes. n_bins number bins show histogram.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot standardised indices — plot_sei","text":"ggplot object displaying standardised index values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot standardised indices — plot_sei","text":"plot_sei() function can used plot either time series (type = \"ts\") histogram (type = \"hist\" type = \"bar\") values x. time series can displayed x xts time series. argument lab string containing label x-axis type = \"hist\" type = \"bar\" y-axis type = \"ts\". options type = \"hist\" type = \"bar\" display histograms data x. type = \"hist\", plot_sei() essentially wrapper geom_histogram(), type = \"bar\" wrapper geom_bar(). latter can provide flexibility plotting bounded data, whereas former easier use superimposing densities top.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot standardised indices — plot_sei","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot standardised indices — plot_sei","text":"","code":"data(data_supply) # consider hourly German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) supply_de_std <- std_index(supply_de, timescale = \"hours\")  plot_sei(supply_de, title = \"German renewable energy production in 2019\")  plot_sei(supply_de_std, title = \"German SREPI in 2019\")   plot_sei(supply_de, type = \"hist\", title = \"German renewable energy production in 2019\")  plot_sei(supply_de_std, type = \"hist\", title = \"German SREPI in 2019\")   # type = \"hist\" and type = \"bar both output a histogram of the index values # type = \"hist\" can be useful to superimpose densities on top of the histogram z <- seq(-3.5, 3.5, length.out = length(supply_de_std)) plot_sei(supply_de_std, type = \"hist\", title = \"German SREPI in 2019\") +  ggplot2::geom_line(ggplot2::aes(x = z, y = dnorm(z)), col = \"blue\")   # type = \"bar\" can be useful when the index values are bounded supply_de_std <- std_index(supply_de, timescale = \"hours\", index_type = \"prob11\") plot_sei(supply_de_std, type = \"hist\", xlims = c(-1, 1), title = 'type = \"hist\"') #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`).  plot_sei(supply_de_std, type = \"bar\", xlims = c(-1, 1), title = 'type = \"bar\"')"},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standardised indices — std_index","title":"Calculate standardised indices — std_index","text":"Inputs time series chosen variable (e.g. precipitation, energy demand, residual load etc.) returns time series standardised indices. Indices can calculated timescale.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standardised indices — std_index","text":"","code":"std_index(   x_new,   x_ref = x_new,   timescale = NULL,   dist = \"empirical\",   preds_new = NULL,   preds_ref = preds_new,   method = \"mle\",   return_fit = FALSE,   index_type = \"normal\",   gr_new = NULL,   gr_ref = gr_new,   moving_window = NULL,   window_scale = NULL,   agg_period = NULL,   agg_scale = NULL,   agg_fun = \"sum\",   rescale = NULL,   rescale_fun = \"sum\",   ignore_na = FALSE,   n_thres = 20,   na_thres = 10,   lower = -Inf,   upper = Inf,   cens = index_type,   ... )"},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standardised indices — std_index","text":"x_new vector time series converted standardised indices. x_ref vector time series containing reference data use calculating standardised indices. timescale timescale data; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. preds_new data frame predictor variables estimated distribution depend, corresponding new observations x_new. preds_ref data frame predictor variables estimated distribution depend, corresponding reference observations x_ref. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. return_fit logical specifying whether return parameters goodness--fit statistics distribution fit. index_type type standardised index: \"normal\" (default), \"prob01\", \"prob11\" (see details). gr_new vector factors separate distributions applied x_new. gr_ref vector factors separate distributions fit x_ref. moving_window length moving window calculate indices. window_scale timescale moving_window; default timescale data. agg_period length aggregation period. agg_scale timescale agg_period; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. agg_fun string specifying function used aggregate data aggregation period, default 'sum'. rescale timescale time series rescaled ; one \"days\", \"weeks\", \"months\", \"quarters\", \"years\". rescale_fun string specifying function used rescale data; default \"sum\". ignore_na logical specifying whether ignore NAs rescaling time series. n_thres minimum number data points required estimate distribution; default 10. na_thres threshold percentage NA values allowed aggregation period; default 10%. lower, upper numeric values specifying lower upper bounds values x_ref x_new censored. cens method used deal censoring PIT values; either string ('normal' 'prob'), corresponding common choices, custom numeric value. ... additional arguments passed fitdist gamlss","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standardised indices — std_index","text":"Time series standardised indices. return_fit = TRUE, list returned contains time series standardised indices, well information fit distribution data. gr_new specified, std_index returns list time series standardised indices, element corresponding factor gr_new.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate standardised indices — std_index","text":"Standardised indices Standardised indices calculated estimating cumulative distribution function (CDF) variable interest, using transform measurements standardised scale. std_index wrapper get_pit fit_dist additionally allows aggregation, rescaling, grouping time series. details can found help pages get_pit fit_dist. std_index estimates CDF using time series reference data x_ref, applies resulting transformation time series x_new. result time series standardised x_new values. standardised indices quantify extreme x_new values reference x_ref. x_new x_ref therefore contain values variable. x_ref specified, set equal x_new, standardised indices calculated -sample. function returns vector time series (depending format x_new) containing standardised indices corresponding x_new. Three different types indices available, explained detail vignette. index type can chosen using index_type, must one \"normal\" (default), \"prob01\", \"prob11\". Time series manipulations x_new x_ref can either provided vectors xts time series. latter case, time series can aggregated across timescales rescaled. useful, example, x_new contains hourly data, interest daily accumulations averages hourly data. argument rescale converts data different timescale. original timescale data can manually specified using argument timescale. timescale required time series aggregated rescaled. Otherwise, std_index try automatically determine timescale data. Manually specifying timescale data generally robust. rescaling performed using function rescale_fun. default, rescale_fun = \"sum\", values added across timescale interest. can changed user-specified function. argument agg_period aggregates data across timescale interest. aggregation performed using aggregate_xts. differs rescale resolution data remains . agg_period number specifying long data aggregated across. default, assumed agg_period timescale x_new x_ref. example, data hourly agg_period = 24, assumes data aggregated past 24 hours. scale aggregation period can also specified manually using agg_scale. example, specifying agg_period = 1 agg_scale = \"days\" also aggregate data past day. agg_fun specifies data aggregated, default agg_fun = \"sum\". Distribution estimation dist distribution used estimate CDF x_ref. Currently, functionality available fit one following distributions data: Normal (\"norm\"), Log-normal (\"lnorm\"), Logistic (\"logis\"), Log-logistic (\"llogis\"), Exponential (\"exp\"), Gamma (\"gamma\"), Weibull (\"weibull\"). Alternatively, CDF can estimated empirically (dist = \"empirical\") based values x_ref, using kernel density estimation (dist = \"kde\"). dist parametric family distributions, parameters distribution estimated x_ref. method specifies parameters estimated; see fit_dist details. resulting parameters corresponding goodness--fit statistics can returned specifying return_fit = TRUE. default, distribution estimated values x_ref. Alternatively, x_new xts object, parameters can estimated sequentially using moving window values. moving_window determines length moving window. single value, assumed timescale x_new. timsscale moving window can also specified manually using window_scale. window_scale must also one \"days\", \"weeks\", \"months\", \"quarters\", \"years\". estimated distribution can also non-stationary, depending predictors covariates. predictors can stored data frames input std_index via arguments preds_new preds_ref; see fit_dist details. Predictors used data rescaled, since also require rescaling predictors; case, error returned. Grouping default, one distribution fit values x_ref. Separate distributions can fit different subsets data specifying gr_ref gr_new. factor vectors, factor corresponds different grouping subset data. factor appear gr_new appear gr_ref, since data estimate distribution group. error returned case. Since distribution values x_ref change different groupings, argument dist can vector strings length number factor levels gr_new. case, first element dist correspond first element levels(gr_new) . dist single string, distribution used grouping.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate standardised indices — std_index","text":"McKee, T. B., Doesken, N. J., & Kleist, J. (1993): `relationship drought frequency duration time scales', Proceedings 8th Conference Applied Climatology 17, 179-183. Vicente-Serrano, S. M., Beguería, S., & López-Moreno, J. . (2010): `multiscalar drought index sensitive global warming: standardized precipitation evapotranspiration index', Journal Climate 23, 1696-1718. https://doi.org/10.1175/2009JCLI2909.1 Allen, S. & N. Otero (2023): `Standardised indices monitor energy droughts', Renewable Energy 217, 119206. https://doi.org/10.1016/j.renene.2023.119206","code":""},{"path":[]},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate standardised indices — std_index","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate standardised indices — std_index","text":"","code":"data(data_supply) # consider hourly German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) #options(xts_check_TZ = FALSE)  # convert to hourly standardised indices supply_de_std <- std_index(supply_de, timescale = \"hours\") hist(supply_de, main = \"Raw values\")  hist(supply_de_std, main = \"Standardised values\")   # convert to daily or weekly standardised indices supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\")  # convert to weekly standardised indices calculated on each day supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            agg_period = 1, agg_scale = \"weeks\")  # calculate standardised indices corresponding to December, based on the previous year dec <- zoo::index(supply_de) > \"2019-12-01 UTC\" supply_de_std_dec <- std_index(x_new = supply_de[dec], x_ref = supply_de[!dec],                                timescale = \"hours\")  # calculate standardised indices using a 100 day moving window supply_de_std_dec <- std_index(supply_de[dec], supply_de, timescale = \"hours\",                                rescale = \"days\", moving_window = 100)  # suppose we are interested in the daily maximum rather than the daily total supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            rescale_fun = \"max\") supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            rescale_fun = \"mean\") # or average  # the default uses the empirical distribution, but this requires more data than # parametric distributions, meaning it is not ideal when data is short, e.g. in weekly case supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\") # warning #> Warning: using the empirical distribution is only recommended when at least #>               100 values are available when fitting the distribution # instead, we can use a parametric distribution, e.g. a gamma distribution supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\", dist = \"gamma\") # we can check the fit by checking whether the indices resemble a standard normal distribution hist(supply_de)  hist(supply_de_std)  # we can also look at the properties of the fit supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\",                            dist = \"gamma\", return_fit = TRUE)  # we could also use kernel density estimation, which is a flexible compromise between the two supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\", dist = \"kde\")   # calculate separate indices for each quarter of 2019 season <- ceiling(lubridate::month(zoo::index(supply_de)) / 3) season <- factor(c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")[season]) supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            gr_new = season, dist = \"kde\", return_fit = TRUE)   # non-stationary distribution estimation using gamlss  N <- 1000 x <- seq(-10, 20, length.out = N) data <- rnorm(N, x, exp(x/10)) # non-stationary mean and standard deviation plot(data)  preds <- data.frame(t = x)  # standardised indices without trend si_st <- std_index(data, dist = \"norm\") plot.ts(si_st)  # standardised indices with trend in mean si_nst <- std_index(data, dist = \"norm\", preds_new = preds) #> GAMLSS-RS iteration 1: Global Deviance = 5073.898  #> GAMLSS-RS iteration 2: Global Deviance = 5073.898  plot.ts(si_nst)  # standardised indices with trend in mean and sd si_nst2 <- std_index(data, dist = \"norm\", preds_new = preds, sigma.formula = ~ .) #> GAMLSS-RS iteration 1: Global Deviance = 3885.226  #> GAMLSS-RS iteration 2: Global Deviance = 3883.514  #> GAMLSS-RS iteration 3: Global Deviance = 3883.514  plot.ts(si_nst2)"}]
