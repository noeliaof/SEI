[{"path":"https://noeliaof.github.io/SEI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Allen. Author, maintainer. Noelia Otero. Author.","code":""},{"path":"https://noeliaof.github.io/SEI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allen S, Otero N (2024). SEI: Calculating Standardised Indices. R package version 0.1.1, https://noeliaof.github.io/SEI/, https://github.com/noeliaof/SEI.","code":"@Manual{,   title = {SEI: Calculating Standardised Indices},   author = {Sam Allen and Noelia Otero},   year = {2024},   note = {R package version 0.1.1, https://noeliaof.github.io/SEI/},   url = {https://github.com/noeliaof/SEI}, }"},{"path":"https://noeliaof.github.io/SEI/index.html","id":"sei","dir":"","previous_headings":"","what":"SEI","title":"SEI","text":"SEI R package calculate standardised indices. Standardised indices frequently used convert measurements common scale meaningful probabilistic interpretation. Well-known examples include Standardised Precipitation Index (SPI) Standardised Precipitation Evapotranspiration Index (SPEI), used monitor hydrological droughts. Standardised indices also recently proposed monitor energy droughts, including Standardised Residual Load Index (SRLI), Standardised Renewable Energy Production Index (SREPI). standardised energy indices discussed > Allen, S. Otero, N (2023). > Standardised indices monitor energy droughts. > Renewable Energy. > https://doi.org/10.1016/j.renene.2023.119206 package facilitates implementation standardised indices practice. SEI package includes - range distributions calculate standardised indices (including flexible non- semi-parametric methods), - Diagnostic checks ensure chosen distribution valid input data, - ability compute indices rolling window values, - ability compute indices timescale, - Several notions standardised indices.","code":""},{"path":"https://noeliaof.github.io/SEI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SEI","text":"developmental version can installed using devtools: vignette lists several possible extensions implemented. Additional comments, suggestions, input welcome.","code":"# install.packages(\"devtools\") library(devtools) install_github(\"noeliaof/SEI\", build_vignettes = TRUE)"},{"path":"https://noeliaof.github.io/SEI/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"SEI","text":"Standardised indices provide means convert measurements common interpretable scale. useful many reasons. example: 1) common scale renders indices easy interpret. 2) standardised scale also underlying probabilistic interpretation, making indices ideal risk management decision-making. 3) Since standardisation can performed separately different conditions (e.g. different seasons locations), indices can defined relative sense, facilitating comparison measurements different conditions. general approach compute indices estimate cumulative distribution function F underlying measurements, use derive probability integral transform (PIT) values, transform PIT values using Gaussian quantile function. F estimated accurately, resulting values resemble sample standard normal distribution. negative value represents measurement lower average, positive value represents -average measurement. high low index constitutes extreme value, can deduce extreme value comparing quantiles standard normal distribution. main challenge calculating standardised indices estimating cumulative distribution function F measurements. can achieved assuming parametric distribution: SPI, example, typically assumes precipitation follows gamma distribution. Alternatively, can use kernel density estimation empirical distribution function get flexible estimate; however, methods typically require data parametric distributions. case, important check estimated distribution valid. package offers wide range distributions, additionally provides diagnostic tools check chosen distribution adequately fits input data. theory underlying standardised indices discussed detail package vignette.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate values in xts objects — aggregate_xts","title":"Aggregate values in xts objects — aggregate_xts","text":"Inputs xts time series outputs xts time series whose values aggregated moving window user-specified length.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate values in xts objects — aggregate_xts","text":"","code":"aggregate_xts(   x,   agg_period,   agg_scale = c(\"days\", \"mins\", \"hours\", \"weeks\", \"months\", \"years\"),   agg_fun = \"sum\",   timescale = c(\"days\", \"mins\", \"hours\", \"weeks\", \"months\", \"years\"),   na_thres = 10 )"},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate values in xts objects — aggregate_xts","text":"x xts object aggregated. agg_period length aggregation period. agg_scale timescale agg_period; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. agg_fun string specifying function used aggregate data aggregation period, default 'sum'. timescale timescale data; 'mins', 'hours', 'days', 'weeks', 'months', 'years'. na_thres threshold percentage NA values allowed aggregation period; default 10.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate values in xts objects — aggregate_xts","text":"xts time series aggregated values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate values in xts objects — aggregate_xts","text":"adapted code available https://github.com/WillemMaetens/standaRdized. agg_period single numeric value specifying many time units data x aggregated. default, agg_period assumed correspond number days, can also specified manually using argument agg_scale. agg_fun determines function used aggregate time series. default, agg_fun = \"sum\", meaning aggregation results accumulations aggregation period. Alternative functions can also used. example, specifying agg_fun = \"mean\" return mean aggregation period. timescale timescale input data x. default, assumed \"days\". Since time series x aggregates data aggregation period, problems may arise x contains missing values. example, interest daily accumulations, 50% values aggregation period missing, accumulation aggregation period accurate. can controlled using argument na_thres. na_thres specifies percentage NA values aggregation period NA value returned. .e. proportion values allowed missing. default na_thres = 10.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregate values in xts objects — aggregate_xts","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/aggregate_xts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate values in xts objects — aggregate_xts","text":"","code":"# \\donttest{  data(data_supply, package = \"SEI\") # consider hourly German energy production data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date)  # daily accumulations supply_de_daily <- aggregate_xts(supply_de, agg_period = 1, timescale = \"hours\")  # weekly means supply_de_weekly <- aggregate_xts(supply_de, agg_period = 1, agg_scale = \"weeks\",                                   agg_fun = \"mean\", timescale = \"hours\")  plot(supply_de, main = \"Hourly energy production in Germany\")  plot(supply_de_daily, main = \"Daily accumulated energy production in Germany\")  plot(supply_de_weekly, main = \"Weekly averaged energy production in Germany\")   # }"},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of wind and solar energy production — data_supply","title":"Time series of wind and solar energy production — data_supply","text":"dataset contains hourly time series wind solar energy production 27 European countries 2019.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of wind and solar energy production — data_supply","text":"","code":"data(\"data_supply\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series of wind and solar energy production — data_supply","text":"object type data.frame containing 3 variables: date POSIXct series times energy production available. country country energy production measurement corresponds. PWS hourly wind solar energy production corresponding time country.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series of wind and solar energy production — data_supply","text":"dataframe data_supply contains 236520 (24 x 365 x 27) rows, containing wind solar energy production hour 2019 27 countries. corresponds subset data used Bloomfield Brayshaw. (2021), can accessed https://researchdata.reading.ac.uk/321/. Users referred paper details.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time series of wind and solar energy production — data_supply","text":"Bloomfield, Hannah Brayshaw, David (2021): ERA5 derived time series European aggregated surface weather variables, wind power, solar power capacity factors: hourly data 1950-2020. doi:10.17864/1947.000321","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_supply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of wind and solar energy production — data_supply","text":"","code":"data(\"data_supply\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of average wind speed in Germany — data_wind_de","title":"Time series of average wind speed in Germany — data_wind_de","text":"dataset contains daily time series average wind speeds across Germany 1979 2019.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of average wind speed in Germany — data_wind_de","text":"","code":"data(\"data_wind_de\")"},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series of average wind speed in Germany — data_wind_de","text":"object type data.frame containing 2 variables: date POSIXct series times average wind speeds available. wsmean average wind speed Germany corresponding time.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series of average wind speed in Germany — data_wind_de","text":"dataframe data_wind_de contains 14975 (365 x 41 + 10) rows, containing daily average wind speed Germany 41 years 1979 2019. Ten leap years occur within period. corresponds subset data publicly available https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-pressure-levels?tab=overview. Users referred reference details.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time series of average wind speed in Germany — data_wind_de","text":"Hersbach, H et al. (2023): ERA5 hourly data single levels 1940 present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS) doi:10.24381/cds.adbb2d47  Accessed 01-09-2022.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/data_wind_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of average wind speed in Germany — data_wind_de","text":"","code":"data(\"wind_de\") #> Warning: data set ‘wind_de’ not found"},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a distribution to data — fit_dist","title":"Fit a distribution to data — fit_dist","text":"Function fit specified distribution vector data. Returns estimated distribution relevant goodness--fit statistics.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a distribution to data — fit_dist","text":"","code":"fit_dist(data, dist, method = \"mle\", preds = NULL, n_thres = 20, ...)"},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a distribution to data — fit_dist","text":"data numeric vector. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. n_thres minimum number data points required estimate distribution; default 20. ... additional arguments passed fitdistrplus::fitdist","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a distribution to data — fit_dist","text":"list containing estimated distribution function, parameters, Kolmogorov-Smirnov goodness--fit statistics.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a distribution to data — fit_dist","text":"adapted code available https://github.com/WillemMaetens/standaRdized. data numeric vector data distribution estimated. dist specified distribution fit data. must one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. 'empirical' returns empirical distribution function data, 'kde' applies (normal) kernel density estimation data, 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull' correspond normal, log-normal, logistic, log-logistic, exponential, gamma, Weibull distributions, respectively. default, dist = 'empirical', case distribution estimated empirically data. recommended least 100 values data, warning message returned otherwise. n_thres minimum number observations required fit distribution. default n_thres = 20. number values data smaller na_thres, error returned. guards -fitting, can result distributions generalise well --sample. method determines method used estimate distribution parameters. argument redundant dist = 'empirical' dist = 'kde'. Otherwise, fit_dist essentially provides wrapper fitdist, details can found corresponding documentation. Additional arguments fitdist can also specified via .... relevant, default estimate parameters using maximum likelihood estimation. Parameter estimation also possible using L-moment matching (method = 'lmme'), distribution choices except log-logistic distribution.","code":""},{"path":[]},{"path":"https://noeliaof.github.io/SEI/reference/fit_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a distribution to data — fit_dist","text":"","code":"N <- 1000 shape <- 3 rate <- 2  x <- seq(0, 10, 0.01)  ### gamma distribution  # maximum likelihood data <- rgamma(N, shape, rate) out <- fit_dist(data, dist = \"gamma\") hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")   # method of moments out <- fit_dist(data, dist = \"gamma\", method = \"mme\") hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")   # method of l-moments out <- fit_dist(data, dist = \"gamma\", method = \"lmme\") #> Error in loadNamespace(x): there is no package called ‘lmom’ hist(data, breaks = 30, probability = TRUE) lines(x, dgamma(x, out$params[1], out$params[2]), col = \"blue\")    ## weibull distribution  # maximum likelihood data <- rweibull(N, shape, 1/rate) out <- fit_dist(data, dist = \"weibull\") hist(data, breaks = 30, probability = TRUE) lines(x, dweibull(x, out$params[1], out$params[2]), col = \"blue\")   # method of l-moments out <- fit_dist(data, dist = \"weibull\", method = \"lmme\") #> Error in loadNamespace(x): there is no package called ‘lmom’ hist(data, breaks = 30, probability = TRUE) lines(x, dweibull(x, out$params[1], out$params[2]), col = \"blue\")    ## exponential distribution  # method of moments out <- fit_dist(data, dist = \"exp\", method = \"mme\") hist(data, breaks = 30, probability = TRUE) lines(x, dexp(x, out$params), col = \"blue\")    ## logistic distribution  x <- seq(-10, 20, 0.01)  # maximum likelihood data <- rlogis(N, shape, rate) out <- fit_dist(data, dist = \"logis\") hist(data, breaks = 30, probability = TRUE) lines(x, dlogis(x, out$params[1], out$params[2]), col = \"blue\")     ##### non-stationary estimation using gamlss  ## normal distribution data <- rnorm(N, x[1:N] + shape, exp(x/10)) plot(data)  preds <- data.frame(t = x[1:N])  out_st <- fit_dist(data, dist = \"norm\") out_nst <- fit_dist(data, dist = \"norm\", preds = preds) #> GAMLSS-RS iteration 1: Global Deviance = 1950.554  #> GAMLSS-RS iteration 2: Global Deviance = 1950.554  out_nst2 <- fit_dist(data, dist = \"norm\", preds = preds, sigma.formula = ~ .) #> GAMLSS-RS iteration 1: Global Deviance = 1778.167  #> GAMLSS-RS iteration 2: Global Deviance = 1778.157  #> GAMLSS-RS iteration 3: Global Deviance = 1778.157   pit_st <- out_st$F_x(data, out_st$params) # pit values without trend hist(pit_st)  pit_nst <- out_nst$F_x(data, out_nst$params, preds) # pit values with trend in mean hist(pit_nst)  pit_nst2 <- out_nst2$F_x(data, out_nst2$params, preds) # pit values with trend in mean and sd hist(pit_nst2)   ## log normal distribution x <- seq(0.01, 10, length.out = N) data <- rlnorm(N, (x + shape)/3, 1/rate) plot(data)  preds <- data.frame(t = x)  out <- fit_dist(data, dist = \"lnorm\", preds = preds) #> Error in LOGNO() : could not find function \"LOGNO\" #> Warning: distribution fitting failed pit <- out$F_x(data, out$params, preds) #> Error in out$F_x(data, out$params, preds): unused argument (preds) hist(pit) #> Error in eval(expr, envir, enclos): object 'pit' not found"},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":null,"dir":"Reference","previous_headings":"","what":"Get drought characteristics — get_drought","title":"Get drought characteristics — get_drought","text":"Extract characteristics droughts time series values. Drought characteristics include occurrence, intensity, magnitude, duration drought.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get drought characteristics — get_drought","text":"","code":"get_drought(   x,   thresholds = c(1.28, 1.64, 1.96),   exceed = TRUE,   lag = FALSE,   cluster = NULL )"},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get drought characteristics — get_drought","text":"x vector xts object. thresholds numeric vector containing thresholds use defining droughts. exceed logical; TRUE drought defined x thresholds, FALSE otherwise. lag logical; TRUE drought end value changes sign. cluster integer specifying number timesteps droughts clustered.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get drought characteristics — get_drought","text":"data frame containing original values x corresponding drought characteristics.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get drought characteristics — get_drought","text":"drought assumed defined instance vector x exceeds (exceed = TRUE) falls (exceed = FALSE) specified thresholds thresholds. thresholds can single value, vector values. latter case, threshold assumed different level intensity drought. example, thresholds = c(1, 1.5, 2), level 1 drought occurs whenever x exceeds 1 lower 1.5, level 2 drought occurs whenever x exceeds 1.5 lower 2, level 3 drought occurs whenever x exceeds 2. default, thresholds = c(1.28, 1.64, 1.96), correspond 90th, 95th, 97.5th percentiles standard normal distribution. meteorology, droughts typically defined terms standardised indices, standardised precipitation index (SPI). sometimes case drought event ends variable interest longer exceeds (falls ) relevant thresholds, rather index changes sign. can help account fluctuations around threshold values, classing one long drought rather several shorter droughts. definition can used specifying lag = TRUE. get_drought() currently use time series information xts input, thereby assuming time series complete, without missing time periods. x vector, rather xts object, also implicitly assumed. output dataframe containing vector x, logical vector specifying whether value x corresponds drought event, magnitude drought. magnitude drought shown last day drought. makes easier compute statistics drought magnitude, average drought magnitude. thresholds vector, intensity level drought also returned.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get drought characteristics — get_drought","text":"Allen, S. N. Otero (2023): `Standardised indices monitor energy droughts', Renewable Energy doi:10.1016/j.renene.2023.119206 McKee, T. B., Doesken, N. J., & Kleist, J. (1993): `relationship drought frequency duration time scales', Proceedings 8th Conference Applied Climatology 17, 179-183.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get drought characteristics — get_drought","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_drought.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get drought characteristics — get_drought","text":"","code":"data(data_supply) # consider hourly German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) supply_de_std <- std_index(supply_de, timescale = \"hours\") #> Error in std_index(supply_de, timescale = \"hours\"): object 'preds' not found  drought_df <- get_drought(supply_de_std, thresholds = c(-1, -1.5, -2), exceed = FALSE) #> Error in eval(expr, envir, enclos): object 'supply_de_std' not found head(drought_df) #> Error in eval(expr, envir, enclos): object 'drought_df' not found"},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability integral transform values — get_pit","title":"Calculate probability integral transform values — get_pit","text":"Function estimate cumulative distribution function (CDF) set observations, return corresponding probability integral transform (PIT) values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability integral transform values — get_pit","text":"","code":"get_pit(   ref_data,   new_data = NULL,   ref_preds = NULL,   new_preds = NULL,   dist = \"empirical\",   method = \"mle\",   return_fit = FALSE,   lower = -Inf,   upper = Inf,   cens = NULL,   n_thres = 20,   ... )"},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability integral transform values — get_pit","text":"ref_data numeric vector estimate CDF. new_data numeric vector calculate PIT values. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. return_fit logical specifying whether return parameters goodness--fit statistics distribution fit. lower, upper numeric values specifying lower upper bounds censoring performed. cens values assign censored values; either string ('normal' 'prob'), corresponding common choices, custom numeric vector length two. n_thres minimum number data points required estimate distribution; default 20. ... additional arguments passed fitdistrplus::fitdist","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability integral transform values — get_pit","text":"vector PIT values return_fit = F, , return_fit = T, list containing estimated CDF (F_x), corresponding parameters (params), properties fit (fit_props).","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability integral transform values — get_pit","text":"dist specifies distribution used estimate cumulative distribution function observations. default, dist = \"empirical\", case CDF estimated empirically values ref_data. recommended least 100 values ref_data, warning message returned otherwise. Parametric distributions appropriate relatively little data, good reason expect data follows particular distribution. check chosen parametric distribution appropriate, argument return_fit can used return estimated parameters distribution, well Kolmogorov-Smirnov goodness--fit test statistics. flexible compromise using empirical methods parametric distributions use kernel density estimation, dist = \"kde\". dist must one : 'empirical' (empirical distribution given data), 'kde' (kernel density estimation), norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. parametric distributions, parameters estimated using maximum likelihood estimation.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate probability integral transform values — get_pit","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/get_pit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability integral transform values — get_pit","text":"","code":"N <- 1000 shape <- 3 rate <- 2  x_ref <- rgamma(N, shape, rate) x_new <- rgamma(N, shape, rate)  # empirical distribution pit <- get_pit(x_ref, x_new) hist(pit)   # gamma distribution pit <- get_pit(x_ref, x_new, dist = \"gamma\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dgamma(seq(0, 10, 0.01), pit$params[1], pit$params[2]), col = \"blue\")    # weibull distribution pit <- get_pit(x_ref, x_new, dist = \"weibull\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dweibull(seq(0, 10, 0.01), pit$params[1], pit$params[2]), col = \"blue\")    # exponential distribution pit <- get_pit(x_ref, x_new, dist = \"exp\", return_fit = TRUE) hist(pit$pit)   hist(x_ref, breaks = 30, probability = TRUE) lines(seq(0, 10, 0.01), dexp(seq(0, 10, 0.01), pit$params[1]), col = \"blue\")    # gamma distribution with censoring x_ref <- c(x_ref, numeric(N)) pit <- get_pit(x_ref, dist = \"gamma\", lower = 0, cens = \"prob\") hist(pit)  mean(pit) # = 1/2 #> [1] 0.500608 mean(qnorm(pit)) # != 0 #> [1] 0.06237125  pit <- get_pit(x_ref, dist = \"gamma\", lower = 0, cens = \"normal\") hist(qnorm(pit))  mean(pit) # != 1/2 #> [1] 0.4818424 mean(qnorm(pit)) # = 0 #> [1] 0.0006738413   ## normal distribution with trend in mean x <- seq(-10, 20, length.out = N) x_ref <- rnorm(N, x + shape, 2) plot(x_ref)  preds <- data.frame(t = x)  pit <- get_pit(x_ref, ref_preds = preds, dist = \"norm\") #> GAMLSS-RS iteration 1: Global Deviance = 4204.338  #> GAMLSS-RS iteration 2: Global Deviance = 4204.338  hist(pit)   ## normal distribution with trend in mean and standard deviation x_ref <- rnorm(N, x + shape, exp(x/10)) plot(x_ref)  preds <- data.frame(t = x)  pit <- get_pit(x_ref, ref_preds = preds, dist = \"norm\", sigma.formula = ~ .) #> GAMLSS-RS iteration 1: Global Deviance = 3833.889  #> GAMLSS-RS iteration 2: Global Deviance = 3829.376  #> GAMLSS-RS iteration 3: Global Deviance = 3829.376  hist(pit)"},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot standardised indices — plot_sei","title":"Plot standardised indices — plot_sei","text":"Plot time series containing standardised indices, histogram indices.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot standardised indices — plot_sei","text":"","code":"plot_sei(   x,   type = c(\"ts\", \"hist\", \"bar\"),   title = NULL,   lab = \"Std. Index\",   xlims = NULL,   ylims = NULL,   n_bins = 30 )"},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot standardised indices — plot_sei","text":"x vector xts object containing indices plotted. type type plot (either time series \"ts\", histogram \"hist\", barplot \"bar\"). title optional title plot. lab axis label. xlims, ylims lower upper limits axes. n_bins number bins show histogram.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot standardised indices — plot_sei","text":"ggplot object displaying standardised index values.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot standardised indices — plot_sei","text":"plot_sei() function can used plot either time series (type = \"ts\") histogram (type = \"hist\" type = \"bar\") values x. time series can displayed x xts time series. argument lab string containing label x-axis type = \"hist\" type = \"bar\" y-axis type = \"ts\". options type = \"hist\" type = \"bar\" display histograms data x. type = \"hist\", plot_sei() essentially wrapper geom_histogram(), type = \"bar\" wrapper geom_bar(). latter can provide flexibility plotting bounded data, whereas former easier use superimposing densities top.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot standardised indices — plot_sei","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/plot_sei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot standardised indices — plot_sei","text":"","code":"data(data_supply) # consider hourly German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) supply_de_std <- std_index(supply_de, timescale = \"hours\") #> Error in std_index(supply_de, timescale = \"hours\"): object 'preds' not found  plot_sei(supply_de, title = \"German renewable energy production in 2019\")  plot_sei(supply_de_std, title = \"German SREPI in 2019\") #> Error in eval(expr, envir, enclos): object 'supply_de_std' not found  plot_sei(supply_de, type = \"hist\", title = \"German renewable energy production in 2019\")  plot_sei(supply_de_std, type = \"hist\", title = \"German SREPI in 2019\") #> Error in eval(expr, envir, enclos): object 'supply_de_std' not found"},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standardised indices — std_index","title":"Calculate standardised indices — std_index","text":"Inputs time series chosen variable (e.g. precipitation, energy demand, residual load etc.) returns time series standardised indices. Indices can calculated timescale.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standardised indices — std_index","text":"","code":"std_index(   x_new,   x_ref = x_new,   timescale = NULL,   dist = \"empirical\",   method = \"mle\",   return_fit = FALSE,   index_type = \"normal\",   preds_new = NULL,   preds_ref = preds_new,   gr_new = NULL,   gr_ref = gr_new,   moving_window = NULL,   window_scale = NULL,   agg_period = NULL,   agg_scale = NULL,   agg_fun = \"sum\",   rescale = NULL,   rescale_fun = \"sum\",   ignore_na = FALSE,   n_thres = 20,   na_thres = 10,   lower = -Inf,   upper = Inf,   cens = index_type,   ... )"},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standardised indices — std_index","text":"x_new vector time series converted standardised indices. x_ref vector time series containing reference data use calculating standardised indices. timescale timescale data; 'mins', 'hours', 'days', 'weeks', 'months', 'years'. dist character string specifying distribution fit data; one 'empirical', 'kde', 'norm', 'lnorm', 'logis', 'llogis', 'exp', 'gamma', 'weibull'. method character string coding fitting method:     \"mle\" 'maximum likelihood estimation', \"mme\" 'moment matching estimation',     \"qme\" 'quantile matching estimation', \"mge\" 'maximum goodness--fit estimation'     \"mse\" 'maximum spacing estimation'. return_fit logical specifying whether return parameters goodness--fit statistics distribution fit. index_type type standardised index: \"normal\" (default), \"prob01\", \"prob11\" (see details). gr_new vector factors separate distributions applied x_new. gr_ref vector factors separate distributions fit x_ref. moving_window length moving window calculate indices. window_scale timescale moving_window; default timescale data. agg_period length aggregation period. agg_scale timescale agg_period; one 'mins', 'hours', 'days', 'weeks', 'months', 'years'. agg_fun string specifying function used aggregate data aggregation period, default 'sum'. rescale timescale time series rescaled ; one \"days\", \"weeks\", \"months\", \"quarters\", \"years\". rescale_fun string specifying function used rescale data; default \"sum\". ignore_na logical specifying whether ignore NAs rescaling time series. n_thres minimum number data points required estimate distribution; default 20. na_thres threshold percentage NA values allowed aggregation period; default 10. lower, upper numeric values specifying lower upper bounds censoring performed. cens values assign censored values; either string ('normal' 'prob'), corresponding common choices, custom numeric vector length two. ... additional arguments passed fitdistrplus::fitdist","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standardised indices — std_index","text":"Time series standardised indices.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate standardised indices — std_index","text":"Standardised indices calculated estimating cumulative distribution function (CDF) variable interest, using transform measurements standardised scale. std_index() estimates CDF using time series reference data x_ref, applies resulting transformation time series x_new. result time series standardised x_new values. standardised indices quantify extreme x_new values reference x_ref. x_new x_ref therefore contain values variable. x_ref specified, x_new also used estimate CDF. x_new x_ref can either provided vectors xts time series. latter case, time series can aggregated across timescales rescaled. useful, example, x_new contains hourly data, interest daily accumulations averages hourly data. argument rescale converts data different timescale. original timescale data can manually specified using argument timescale. timescale required time series aggregated rescaled. Otherwise, function try automatically determine timescale data. Manually specifying timescale data generally robust. rescaling performed using function rescale_fun. default, assumed rescale_fun = \"sum\", values added across timescale interest. can changed user-specified function. argument agg_period aggregates data across timescale interest. differs rescale resolution data remains . agg_period number specifying long data aggregated across. default, assumed agg_period timescale x_new x_ref. example, data hourly agg_period = 24, assumes data aggregated past 24 hours. scale aggregation period can also specified manually using agg_scale. example, one also specify agg_period = 1 agg_scale = \"days\", also aggregate data past day. agg_fun specifies data aggregated, default agg_fun = \"sum\". dist distribution used estimate CDF x_ref. Currently, functionality available fit one following distributions data: Normal ('norm'), Log-normal ('lnorm'), Logistic ('logis'), Log-logistic ('llogis'), Exponential ('exp'), Gamma ('gamma'), Weibull ('weibull'). Alternatively, CDF can estimated empirically (dist = \"empirical\") based values x_ref, using kernel density estimation (dist = \"kde\"). dist parametric family distributions, parameters distribution estimated using maximum likelihood estimation x_ref. resulting parameters corresponding goodness--fit statistics can returned specifying return_fit = TRUE. default, distribution estimated values x_ref. Alternatively, x_new xts object, parameters can estimated sequentially using moving window values. moving_window determines length moving window. single value, assumed timescale x_new. can also specified manually using window_scale. window_scale must also one \"days\", \"weeks\", \"months\", \"quarters\", \"years\". function returns vector time series (depending format x_new) containing standardised indices corresponding x_new. Three different types indices available, explained detail vignette. index type can chosen using index_type, must one \"normal\" (default), \"prob01\", \"prob11\".","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate standardised indices — std_index","text":"Allen, S. N. Otero (2023): `Standardised indices monitor energy droughts', Renewable Energy 217, 119206 doi:10.1016/j.renene.2023.119206 McKee, T. B., Doesken, N. J., & Kleist, J. (1993): `relationship drought frequency duration time scales', Proceedings 8th Conference Applied Climatology 17, 179-183.","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate standardised indices — std_index","text":"Sam Allen, Noelia Otero","code":""},{"path":"https://noeliaof.github.io/SEI/reference/std_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate standardised indices — std_index","text":"","code":"data(data_supply) # consider hourly German energy supply data in 2019 supply_de <- subset(data_supply, country == \"Germany\", select = c(\"date\", \"PWS\")) supply_de <- xts::xts(supply_de$PWS, order.by = supply_de$date) #options(xts_check_TZ = FALSE)  # convert to hourly standardised indices supply_de_std <- std_index(supply_de, timescale = \"hours\") #> Error in std_index(supply_de, timescale = \"hours\"): object 'preds' not found hist(supply_de, main = \"Raw values\")  hist(supply_de_std, main = \"Standardised values\") #> Error in eval(expr, envir, enclos): object 'supply_de_std' not found  # convert to daily or weekly standardised indices supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\") #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"days\"): object 'preds' not found  # convert to weekly standardised indices calculated on each day supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            agg_period = 1, agg_scale = \"weeks\") #> Error in aggregate_xts(x_new, len = agg_period, scale = agg_scale, fun = agg_fun,     timescale = timescale, na_thres = na_thres): unused arguments (len = agg_period, scale = agg_scale, fun = agg_fun)  # calculate standardised indices corresponding to December, based on the previous year dec <- zoo::index(supply_de) > \"2019-12-01 UTC\" supply_de_std_dec <- std_index(x_new = supply_de[dec], x_ref = supply_de[!dec],                                timescale = \"hours\") #> Error in std_index(x_new = supply_de[dec], x_ref = supply_de[!dec], timescale = \"hours\"): object 'preds' not found  # calculate standardised indices using a 100 day moving window supply_de_std_dec <- std_index(supply_de[dec], supply_de, timescale = \"hours\",                                rescale = \"days\", moving_window = 100) #> Error in std_index(supply_de[dec], supply_de, timescale = \"hours\", rescale = \"days\",     moving_window = 100): object 'preds' not found  # suppose we are interested in the daily maximum rather than the daily total supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            rescale_fun = \"max\") #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"days\", rescale_fun = \"max\"): object 'preds' not found supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            rescale_fun = \"mean\") # or average #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"days\", rescale_fun = \"mean\"): object 'preds' not found  # the default uses the empirical distribution, but this requires more data than # parametric distributions, meaning it is not ideal when data is short, e.g. in weekly case supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\") # warning #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"weeks\"): object 'preds' not found # instead, we can use a parametric distribution, e.g. a gamma distribution supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\", dist = \"gamma\") #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"weeks\",     dist = \"gamma\"): object 'preds' not found # we can check the fit by checking whether the indices resemble a standard normal distribution hist(supply_de)  hist(supply_de_std) #> Error in eval(expr, envir, enclos): object 'supply_de_std' not found # we can also look at the properties of the fit supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\",                            dist = \"gamma\", return_fit = TRUE) #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"weeks\",     dist = \"gamma\", return_fit = TRUE): object 'preds' not found  # we could also use kernel density estimation, which is a flexible compromise between the two supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"weeks\", dist = \"kde\") #> Error in std_index(supply_de, timescale = \"hours\", rescale = \"weeks\",     dist = \"kde\"): object 'preds' not found   # calculate separate indices for each quarter of 2019 season <- ceiling(lubridate::month(zoo::index(supply_de)) / 3) season <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")[season] supply_de_std <- std_index(supply_de, timescale = \"hours\", rescale = \"days\",                            gr_new = season, dist = \"kde\", return_fit = TRUE) #> Error in std_index(x_new[ind], x_ref[ind], timescale = timescale, dist = dist,     return_fit = return_fit, index_type = index_type, agg_period = agg_period,     agg_scale = agg_scale, agg_fun = agg_fun, rescale = rescale,     ignore_na = ignore_na, na_thres = na_thres, lower = lower,     upper = upper, cens = cens): object 'preds' not found"}]
